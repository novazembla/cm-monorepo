{
  "name": "culturemap",
  "private": true,
  "type": "module",
  "husky": {
    "hooks": {
      "pre-commit": "npm run lint"
    }
  },
  "scripts": {
    "build:api": "NODE_ENV=production npm run package:core:build && npm run package:api:build && npm run app:api:build",
    "build:backend": "NODE_ENV=production npm run package:core:build && npm run app:backend:build",

    "deploy:api": "NODE_ENV=production npm run package:core:build && npm run package:api:build && npm run app:api:build && if [ -d ./packages/api/live ]; then mv ./packages/api/live ./packages/api/x; fi && mv ./packages/api/dist ./packages/api/live && if [ -d ./packages/api/x ]; then rimraf ./packages/api/x; fi && if [ -d ./apps/api/live ]; then mv ./apps/api/live ./apps/api/x; fi && mv ./apps/api/build ./apps/api/live && if [ -d ./apps/api/x ]; then rimraf ./apps/api/x; fi",
    "dev": "NODE_ENV=development npx concurrently -k -p \"[{name}]\" -n \"P:CORE,P:API,A:API,A:BACKEND,P:EXAMPLE\" -c \"#d531f5,#4d5ffa,#09e3b4,#f41788,#f1610a,#61f10a\" \"npm run package:core:dev\" \"npm run package:api:dev\" \"npm run app:api:dev\" \"npm run app:backend:dev\"",
    "dev:api": "NODE_ENV=development npx concurrently -k -p \"[{name}]\" -n \"P:CORE,P:API,A:API,P:EXAMPLE\" -c \"#d531f5,#4d5ffa,#09e3b4,#f41788,#f1610a,#61f10a\" \"npm run package:core:dev\" \"npm run package:api:dev\" \"npm run app:api:dev\"",
    "dev:backend": "NODE_ENV=development npx concurrently -k -p \"[{name}]\" -n \"P:CORE,P:API,A:API,A:BACKEND\" -c \"#d531f5,#4d5ffa,#09e3b4,#f41788,#f1610a,#61f10a\" \"npm run package:core:dev\" \"npm run package:api:dev\" \"npm run app:api:dev\" \"npm run app:backend:dev\"",
    "dev:frontend": "NODE_ENV=development npx concurrently -k -p \"[{name}]\" -n \"P:CORE,P:API,A:API,A:FRONTEND\" -c \"#d531f5,#4d5ffa,#09e3b4,#f41788,#f1610a,#61f10a\" \"npm run package:core:dev\" \"npm run package:api:dev\" \"npm run app:api:dev\" \"npm run app:frontend:dev\"",
    "lint": "npm run package:core:lint && npm run package:api:lint && npm run app:api:lint && npm run app:backend:lint && npm run app:frontend:lint",
    "app:api:start": "node ./apps/api/build/index.js",
    "app:api:dev": "npx concurrently -k -p \"[{name}]\" -n \"BABEL,NODE\" -c \"#dddddd,#aaaaaa,#777777\" \"npm run app:api:watch:babel\" \"sleep 5 && npm run app:api:watch:node\"",
    "app:api:build": "npx rimraf ./apps/api/build && npm run app:api:babel",
    "app:api:deploy": "npx rimraf ./apps/api/build && npm run app:api:babel",
    "app:api:babel": "npx babel ./apps/api/src --out-dir ./apps/api/build --extensions .ts",
    "app:api:watch:babel": "npx babel ./apps/api/src --watch --out-dir ./apps/api/build --extensions .ts",
    "app:api:watch:node": "env-cmd -f ./.env nodemon --watch ./apps/api/build --watch ./packages/api/dist --watch ./packages/core/dist ./apps/api/build/index.js",
    "app:api:lint": "eslint ./apps/api/src --ext .js,.ts",
    "app:backend:build": "NODE_ENV=production npm run build -w backend",
    "app:backend:deploy": "NODE_ENV=production npm run build -w backend && if [ -d ./apps/backend/live ]; then mv ./apps/backend/live ./apps/backend/x; fi && mv ./apps/backend/build ./apps/backend/live && if [ -d ./apps/backend/x ]; rimraf ./apps/backend/x; fi ",
    "app:backend:deploy-read-env": "NODE_ENV=production REACT_APP_API_URL=$(grep '^BASE_URL_API' .env | cut -d '=' -f2) REACT_APP_FRONTEND_URL=$(grep '^BASE_URL_FRONTEND' .env | cut -d '=' -f2) REACT_APP_PREVIEW_SECRET=$(grep '^APP_PREVIEW_SECRET' .env | cut -d '=' -f2) npm run build -w backend && if [ -d ./apps/backend/live ]; then mv ./apps/backend/live ./apps/backend/x; fi && mv ./apps/backend/build ./apps/backend/live",
    "app:backend:dev:build": "REACT_APP_API_URL=$(grep '^BASE_URL_API' .env | cut -d '=' -f2) REACT_APP_FRONTEND_URL=$(grep '^BASE_URL_FRONTEND' .env | cut -d '=' -f2) REACT_APP_PREVIEW_SECRET=$(grep '^APP_PREVIEW_SECRET' .env | cut -d '=' -f2) SKIP_PREFLIGHT_CHECK=true npm run build -w backend",
    "app:backend:dev:build:serve": "REACT_APP_API_URL=$(grep '^BASE_URL_API' .env | cut -d '=' -f2) REACT_APP_FRONTEND_URL=$(grep '^BASE_URL_FRONTEND' .env | cut -d '=' -f2) REACT_APP_PREVIEW_SECRET=$(grep '^APP_PREVIEW_SECRET' .env | cut -d '=' -f2) SKIP_PREFLIGHT_CHECK=true npx serve apps/backend/build",
    "app:backend:dev": "PORT=$(grep DEV_BACKEND_PORT .env | cut -d '=' -f2) REACT_APP_API_URL=$(grep '^BASE_URL_API' .env | cut -d '=' -f2) REACT_APP_API_URL=$(grep '^BASE_URL_API' .env | cut -d '=' -f2) REACT_APP_FRONTEND_URL=$(grep '^BASE_URL_FRONTEND' .env | cut -d '=' -f2) REACT_APP_PREVIEW_SECRET=$(grep '^APP_PREVIEW_SECRET' .env | cut -d '=' -f2) SKIP_PREFLIGHT_CHECK=true npm run start -w backend",
    "app:backend:lint": "eslint ./apps/backend/ --ext .js,.jsx,.ts,.tsx",
    "app:backend:translations": "echo \"Please run 'npm run i18n-extract' right in the ./app/backend folder\"",
    "package:api:dev": "npx concurrently -k -p \"[{name}]\" -n \"BABEL,TYPINGS\" -c \"#dddddd,#aaaaaa,#777777\" \"npm run package:api:watch:babel\" \"npm run package:api:watch:typings\"",
    "package:api:build": "NODE_ENV=production npx rimraf ./packages/api/dist && npm run package:api:db:generate && npm run package:api:nexus && npm run package:api:babel && npm run package:api:typings",
    "package:api:deploy": "NODE_ENV=production npx rimraf ./packages/api/dist && npm run package:api:db:generate && npm run package:api:nexus && npm run package:api:babel && npm run package:api:typings && if [ -d ./packages/api/live ]; then mv ./packages/api/live ./packages/api/x; fi && mv ./packages/api/dist ./packages/api/live && if [ -d ./packages/api/x ]; then rimraf ./packages/api/x; fi",
    "package:api:babel": "npx babel ./packages/api/src --out-dir ./packages/api/dist --extensions .ts",
    "package:api:typings": "npx tsc ./packages/api/src/*.ts --target 'es2020' --moduleResolution 'node' --declaration --esModuleInterop  --emitDeclarationOnly --outDir ./packages/api/dist",
    "package:api:watch:babel": "npx babel ./packages/api/src --watch --out-dir ./packages/api/dist --extensions .ts",
    "package:api:watch:typings": "npx tsc ./packages/api/src/*.ts --target 'es2020' --moduleResolution 'node' --watch --declaration --esModuleInterop --emitDeclarationOnly --preserveWatchOutput --outDir ./packages/api/dist",
    "package:api:lint": "eslint ./packages/api/src --ext .js,.ts --ignore-pattern nexus-typegen.ts",
    "package:api:nexus": "node --loader ts-node/esm --experimental-specifier-resolution=node ./packages/api/src/nexus-graphql/schema.ts",
    "package:api:db:push": "npx prisma db push",
    "package:api:db:migrate": "npx prisma migrate deploy",
    "package:api:db:generate": "npx prisma generate",
    "package:api:db:studio": "npx prisma studio",
    "package:api:db:seed:init": "NODE_ENV=development dotenv -e .env -- node ./packages/api/dist/db/seed/init.js",
    "package:api:db:seed:dev:init": "NODE_ENV=development dotenv -e .env -- node ./packages/api/dist/db/seed/init.dev.js",
    "package:core:dev": "npx concurrently -k -p \"[{name}]\" -n \"BABEL,TYPINGS\" -c \"#dddddd,#aaaaaa,#777777\" \"npm run package:core:watch:babel\" \"npm run package:core:watch:typings\"",
    "package:core:build": "npx rimraf ./packages/core/dist && npm run package:core:babel && npm run package:core:typings",
    "package:core:babel": "npx babel ./packages/core/src --out-dir ./packages/core/dist --extensions .ts",
    "package:core:typings": "npx tsc ./packages/core/src/*.ts --declaration --esModuleInterop --emitDeclarationOnly --outDir ./packages/core/dist",
    "package:core:watch:babel": "npx babel ./packages/core/src --watch --out-dir ./packages/core/dist --extensions .ts",
    "package:core:watch:typings": "npx tsc ./packages/core/src/*.ts --watch --declaration --esModuleInterop --emitDeclarationOnly --preserveWatchOutput --outDir ./packages/core/dist",
    "package:core:lint": "eslint ./packages/core/src --ext .js,.ts"
  },
  "lint-staged": {
    "apps/**/*.{js,jsx,ts,tsx,json,css,scss,md}": [
      "prettier --write"
    ],
    "packages/**/*.{js,jsx,ts,tsx,json,css,scss,md}": [
      "prettier --write"
    ]
  },
  "devEngines": {
    "node": "^14.x || 15.x || 16.x"
  },
  "devDependencies": {
    "@babel/cli": "^7.14.5",
    "@babel/core": "^7.14.6",
    "@babel/preset-env": "^7.14.7",
    "@babel/preset-typescript": "^7.14.5",
    "@types/eslint": "^7.28.2",
    "@typescript-eslint/eslint-plugin": "^4.29.3",
    "babel-plugin-add-import-extension": "^1.5.1",
    "concurrently": "^6.2.0",
    "dotenv-cli": "^4.0.0",
    "env-cmd": "^10.1.0",
    "eslint": "^7.32.0",
    "eslint-config-airbnb": "^18.2.1",
    "eslint-config-airbnb-typescript": "^14.0.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-import": "^2.23.4",
    "eslint-plugin-jsx-a11y": "^6.4.1",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-react-hooks": "^4.2.0",
    "eslint-plugin-security": "^1.4.0",
    "husky": "^7.0.0",
    "lerna": "^4.0.0",
    "lint-staged": "^11.0.0",
    "nodemon": "^2.0.9",
    "prettier": "^2.3.2",
    "prisma-repl": "^1.2.0",
    "rimraf": "^3.0.2",
    "ts-node": "^10.1.0",
    "typescript": "^4.3.5"
  },
  "workspaces": [
    "apps/*",
    "packages/*"
  ],
  "dependencies": {
    "@chakra-ui/react": "^1.6.9",
    "@types/estree": "^0.0.50",
    "@types/lodash.debounce": "^4.0.6",
     
    "dotenv": "^10.0.0",
    "from": "^0.1.7",
    "lodash.debounce": "^4.0.8",
    "prisma": "^3.4.1"
  },
  "prisma": {
    "schema": "./packages/api/prisma/schema.prisma"
  }
}
