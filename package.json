{
  "name": "culturemap",
  "private": true,
  "type": "module",
  "husky": {
    "hooks": {
      "pre-commit": "npm run lint"
    }
  },
  "scripts": {
    "install": "npx husky install",
    "dev": "NODE_ENV=development npx concurrently -k -p \"[{name}]\" -n \"P:CORE,P:API,A:API,A:FRONTEND,A:BACKEND,P:EXAMPLE\" -c \"#d531f5,#4d5ffa,#09e3b4,#f41788,#f1610a,#61f10a\" \"npm run package:core:dev\" \"npm run package:api:dev\" \"npm run app:api:dev\" \"npm run app:frontend:dev\"  \"npm run app:backend:dev\" \"npm run plugin:example:dev\"",
    "dev:api": "NODE_ENV=development npx concurrently -k -p \"[{name}]\" -n \"P:CORE,P:API,A:API,P:EXAMPLE\" -c \"#d531f5,#4d5ffa,#09e3b4,#f41788,#f1610a,#61f10a\" \"npm run package:core:dev\" \"npm run package:api:dev\" \"npm run app:api:dev\" \"npm run plugin:example:dev\"",
    "dev:backend": "NODE_ENV=development npx concurrently -k -p \"[{name}]\" -n \"P:CORE,P:API,A:API,A:BACKEND\" -c \"#d531f5,#4d5ffa,#09e3b4,#f41788,#f1610a,#61f10a\" \"npm run package:core:dev\" \"npm run package:api:dev\" \"npm run app:api:dev\" \"npm run app:backend:dev\"",
    "dev:frontend": "NODE_ENV=development npx concurrently -k -p \"[{name}]\" -n \"P:CORE,P:API,A:API,A:FRONTEND\" -c \"#d531f5,#4d5ffa,#09e3b4,#f41788,#f1610a,#61f10a\" \"npm run package:core:dev\" \"npm run package:api:dev\" \"npm run app:api:dev\" \"npm run app:frontend:dev\"",
    "lint": "npm run package:core:lint && npm run package:api:lint && npm run app:api:lint && npm run app:backend:lint && npm run app:frontend:lint",
    "app:api:start": "node ./apps/api/build/index.js",
    "app:api:dev": "npx concurrently -k -p \"[{name}]\" -n \"BABEL,NODE\" -c \"#dddddd,#aaaaaa,#777777\" \"npm run app:api:watch:babel\" \"npm run app:api:watch:node\"",
    "app:api:build": "npx rimraf ./apps/api/build && npm run app:api:babel",
    "app:api:babel": "npx babel ./apps/api/src --out-dir ./apps/api/build --extensions .ts",
    "app:api:watch:babel": "npx babel ./apps/api/src --watch --out-dir ./apps/api/build --extensions .ts",
    "app:api:watch:node": "env-cmd -f ./.env nodemon --watch ./apps/api/build --watch ./packages/api/dist --watch ./packages/core/dist --watch ./plugins/example/dist ./apps/api/build/index.js",
    "app:api:lint": "eslint ./apps/api/src --ext .js,.ts",
    "app:backend:build": "PORT=$(grep BACKEND_PORT .env | cut -d '=' -f2) REACT_APP_API_GRAPHQL_URL=$(grep '^API_GRAPHQL_URL' .env | cut -d '=' -f2) REACT_APP_API_DOMAIN=$(grep '^REACT_APP_API_DOMAIN' .env | cut -d '=' -f2) SKIP_PREFLIGHT_CHECK=true npm run build -w backend",
    "app:backend:dev": "PORT=$(grep BACKEND_PORT .env | cut -d '=' -f2) REACT_APP_API_GRAPHQL_URL=$(grep '^API_GRAPHQL_URL' .env | cut -d '=' -f2) SKIP_PREFLIGHT_CHECK=true npm run start -w backend",
    "app:backend:lint": "eslint ./apps/backend/ --ext .js,.jsx,.ts,.tsx",
    "app:frontend:build": "npm run build -w frontend",
    "app:frontend:dev": "PORT=$(grep FRONTEND_PORT .env | cut -d '=' -f2) NEXT_PUBLIC_API_URL=$(grep '^API_GRAPHQL_URL' .env | cut -d '=' -f2) npm run dev -w frontend",
    "app:frontend:lint": "eslint ./apps/frontend/ --ext .js,.jsx,.ts,.tsx",
    "package:api:dev": "npx concurrently -k -p \"[{name}]\" -n \"BABEL,TYPINGS\" -c \"#dddddd,#aaaaaa,#777777\" \"npm run package:api:watch:babel\" \"npm run package:api:watch:typings\"",
    "package:api:build": "npx rimraf ./packages/api/dist && npm run package:api:nexus && npm run package:api:babel && npm run package:api:typings",
    "package:api:babel": "npx babel ./packages/api/src --out-dir ./packages/api/dist --extensions .ts",
    "package:api:typings": "npx tsc ./packages/api/src/*.ts --target 'es2018' --moduleResolution 'node' --declaration --esModuleInterop  --emitDeclarationOnly --outDir ./packages/api/dist",
    "package:api:watch:babel": "npx babel ./packages/api/src --watch --out-dir ./packages/api/dist --extensions .ts",
    "package:api:watch:typings": "npx tsc ./packages/api/src/*.ts --target 'es2018' --moduleResolution 'node' --watch --declaration --esModuleInterop --emitDeclarationOnly --preserveWatchOutput --outDir ./packages/api/dist",
    "package:api:lint": "eslint ./packages/api/src --ext .js,.ts --ignore-pattern nexus-typegen.ts",
    "package:api:nexus": "node --loader ts-node/esm --experimental-specifier-resolution=node ./packages/api/src/nexus-graphql/schema.ts",
    "package:api:db:push": "npx prisma db push",
    "package:api:db:studio": "npx prisma studio",
    "package:api:db:seed": "node --loader ts-node/esm ./packages/api/prisma/seed.ts",
    "package:api:test:start": "NODE_ENV=test dotenv -c test -- node ./apps/api/build/index.js",
    "package:api:test:db:push": "NODE_ENV=test dotenv -c test -- npx prisma db push --force-reset",
    "package:api:test:db:studio": "NODE_ENV=test dotenv -c test -- npx prisma studio",
    "package:api:test:db:seed": "NODE_ENV=test dotenv -c test -- node --loader ts-node/esm ./packages/api/prisma/seed.test.ts",
    "package:api:test": "NODE_ENV=test npm run package:api:test:db:push && npm run package:api:test:db:seed && NODE_OPTIONS=--experimental-vm-modules dotenv -c test -- npx jest --detectOpenHandles --runInBand --roots ./packages/api/tests --setupTestFrameworkScriptFile=./packages/api/tests/setup.ts --collectCoverageFrom=./packages/api/src/**/*.ts --coverage",
    "package:core:dev": "npx concurrently -k -p \"[{name}]\" -n \"BABEL,TYPINGS\" -c \"#dddddd,#aaaaaa,#777777\" \"npm run package:core:watch:babel\" \"npm run package:core:watch:typings\"",
    "package:core:build": "npx rimraf ./packages/core/dist && npm run package:core:babel && npm run package:core:typings",
    "package:core:babel": "npx babel ./packages/core/src --out-dir ./packages/core/dist --extensions .ts",
    "package:core:typings": "npx tsc ./packages/core/src/*.ts --declaration --esModuleInterop --emitDeclarationOnly --outDir ./packages/core/dist",
    "package:core:watch:babel": "npx babel ./packages/core/src --watch --out-dir ./packages/core/dist --extensions .ts",
    "package:core:watch:typings": "npx tsc ./packages/core/src/*.ts --watch --declaration --esModuleInterop --emitDeclarationOnly --preserveWatchOutput --outDir ./packages/core/dist",
    "package:core:lint": "eslint ./packages/core/src --ext .js,.ts",
    "plugin:example:dev": "npx concurrently -k -p \"[{name}]\" -n \"BABEL,TYPINGS\" -c \"#dddddd,#aaaaaa,#777777\" \"npm run plugin:example:watch:babel\" \"npm run plugin:example:watch:typings\"",
    "plugin:example:build": "npx rimraf ./plugins/example/dist && npm run plugin:example:babel && npm run plugin:example:typings",
    "plugin:example:babel": "npx babel ./plugins/example/src --out-dir ./plugins/example/dist --extensions .ts",
    "plugin:example:typings": "npx tsc ./plugins/example/src/*.ts  --declaration --esModuleInterop  --emitDeclarationOnly --outDir ./plugins/example/dist",
    "plugin:example:watch:babel": "npx babel ./plugins/example/src --watch --out-dir ./plugins/example/dist --extensions .ts",
    "plugin:example:watch:typings": "npx tsc ./plugins/example/src/*.ts --watch --declaration --esModuleInterop --emitDeclarationOnly --preserveWatchOutput --outDir ./plugins/example/dist"
  },
  "lint-staged": {
    "packages/**/*.{js,jsx,ts,tsx,json,css,scss,md}": [
      "prettier --write"
    ]
  },
  "devEngines": {
    "node": "^14.x || 15.x || 16.x"
  },
  "devDependencies": {
    "@babel/cli": "^7.14.5",
    "@babel/core": "^7.14.6",
    "@babel/preset-env": "^7.14.7",
    "@babel/preset-typescript": "^7.14.5",
    "@types/jest": "^26.0.24",
    "@typescript-eslint/eslint-plugin": "^4.28.1",
    "babel-plugin-add-import-extension": "^1.5.1",
    "concurrently": "^6.2.0",
    "dotenv-cli": "^4.0.0",
    "env-cmd": "^10.1.0",
    "eslint": "^7.29.0",
    "eslint-config-airbnb-base": "^14.2.1",
    "eslint-config-airbnb-typescript": "^12.3.1",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-import": "^2.23.4",
    "eslint-plugin-jest": "^24.3.6",
    "eslint-plugin-jsx-a11y": "^6.4.1",
    "eslint-plugin-prettier": "^3.4.0",
    "eslint-plugin-react-hooks": "^4.2.0",
    "eslint-plugin-security": "^1.4.0",
    "husky": "^7.0.0",
    "jest": "^27.0.6",
    "lerna": "^4.0.0",
    "lint-staged": "^11.0.0",
    "nodemon": "^2.0.9",
    "prettier": "^2.3.2",
    "prisma": "^2.27.0",
    "rimraf": "^3.0.2",
    "ts-jest": "^27.0.3",
    "ts-node": "^10.1.0",
    "typescript": "^4.3.5"
  },
  "workspaces": [
    "apps/*",
    "packages/*",
    "plugins/*"
  ],
  "dependencies": {
    "dotenv": "^10.0.0"
  },
  "prisma": {
    "schema": "./packages/api/prisma/schema.prisma"
  }
}
