/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { NexusResolverContext } from "./../nexus-graphql/context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  UserProfileInput: { // input type
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
  }
  UserSignupInput: { // input type
    acceptedTerms: boolean; // Boolean!
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    tokens?: NexusGenRootTypes['AuthPayloadTokens'] | null; // AuthPayloadTokens
    user?: NexusGenRootTypes['AuthUser'] | null; // AuthUser
  }
  AuthPayloadToken: { // root type
    expires: string; // String!
    token?: string | null; // String
  }
  AuthPayloadTokens: { // root type
    access?: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
    refresh?: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
  }
  AuthUser: { // root type
    id: number; // Int!
    permissions?: Array<string | null> | null; // [String]
    roles?: Array<string | null> | null; // [String]
  }
  BooleanResult: { // root type
    result: boolean; // Boolean!
  }
  Mutation: {};
  ProfileUser: { // root type
    email?: string | null; // String
    emailVerified?: boolean | null; // Boolean
    firstName?: string | null; // String
    id: number; // Int!
    lastName?: string | null; // String
    role?: string | null; // String
  }
  Query: {};
  User: { // root type
    createdAt?: string | null; // String
    email?: string | null; // String
    emailVerified?: boolean | null; // Boolean
    firstName?: string | null; // String
    id: number; // Int!
    lastName?: string | null; // String
    role?: string | null; // String
    updatedAt?: string | null; // String
    userBanned?: boolean | null; // Boolean
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    tokens: NexusGenRootTypes['AuthPayloadTokens'] | null; // AuthPayloadTokens
    user: NexusGenRootTypes['AuthUser'] | null; // AuthUser
  }
  AuthPayloadToken: { // field return type
    expires: string; // String!
    token: string | null; // String
  }
  AuthPayloadTokens: { // field return type
    access: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
    refresh: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
  }
  AuthUser: { // field return type
    id: number; // Int!
    permissions: Array<string | null> | null; // [String]
    roles: Array<string | null> | null; // [String]
  }
  BooleanResult: { // field return type
    result: boolean; // Boolean!
  }
  Mutation: { // field return type
    authLogin: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    authLogout: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authPasswordRequest: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authPasswordReset: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authRefresh: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    authRequestEmailVerificationEmail: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authVerifyEmail: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    userProfilePasswordUpdate: NexusGenRootTypes['User']; // User!
    userProfileUpdate: NexusGenRootTypes['User']; // User!
    userSignup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  ProfileUser: { // field return type
    email: string | null; // String
    emailVerified: boolean | null; // Boolean
    firstName: string | null; // String
    id: number; // Int!
    lastName: string | null; // String
    role: string | null; // String
  }
  Query: { // field return type
    userProfileRead: NexusGenRootTypes['ProfileUser']; // ProfileUser!
    users: Array<NexusGenRootTypes['User'] | null>; // [User]!
    users2: Array<NexusGenRootTypes['User'] | null>; // [User]!
  }
  User: { // field return type
    createdAt: string | null; // String
    email: string | null; // String
    emailVerified: boolean | null; // Boolean
    firstName: string | null; // String
    id: number; // Int!
    lastName: string | null; // String
    role: string | null; // String
    updatedAt: string | null; // String
    userBanned: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    tokens: 'AuthPayloadTokens'
    user: 'AuthUser'
  }
  AuthPayloadToken: { // field return type name
    expires: 'String'
    token: 'String'
  }
  AuthPayloadTokens: { // field return type name
    access: 'AuthPayloadToken'
    refresh: 'AuthPayloadToken'
  }
  AuthUser: { // field return type name
    id: 'Int'
    permissions: 'String'
    roles: 'String'
  }
  BooleanResult: { // field return type name
    result: 'Boolean'
  }
  Mutation: { // field return type name
    authLogin: 'AuthPayload'
    authLogout: 'BooleanResult'
    authPasswordRequest: 'BooleanResult'
    authPasswordReset: 'BooleanResult'
    authRefresh: 'AuthPayload'
    authRequestEmailVerificationEmail: 'BooleanResult'
    authVerifyEmail: 'BooleanResult'
    userProfilePasswordUpdate: 'User'
    userProfileUpdate: 'User'
    userSignup: 'AuthPayload'
  }
  ProfileUser: { // field return type name
    email: 'String'
    emailVerified: 'Boolean'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    role: 'String'
  }
  Query: { // field return type name
    userProfileRead: 'ProfileUser'
    users: 'User'
    users2: 'User'
  }
  User: { // field return type name
    createdAt: 'String'
    email: 'String'
    emailVerified: 'Boolean'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    role: 'String'
    updatedAt: 'String'
    userBanned: 'Boolean'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    authLogin: { // args
      email: string; // String!
      password: string; // String!
      scope: string; // String!
    }
    authLogout: { // args
      userId: number; // Int!
    }
    authPasswordRequest: { // args
      email: string; // String!
      scope: string; // String!
    }
    authPasswordReset: { // args
      password: string; // String!
      token: string; // String!
    }
    authRefresh: { // args
      scope: string; // String!
    }
    authRequestEmailVerificationEmail: { // args
      scope: string; // String!
      userId: number; // Int!
    }
    authVerifyEmail: { // args
      token: string; // String!
    }
    userProfilePasswordUpdate: { // args
      password: string; // String!
      scope: string; // String!
      userId: number; // Int!
    }
    userProfileUpdate: { // args
      data: NexusGenInputs['UserProfileInput']; // UserProfileInput!
      scope: string; // String!
      userId: number; // Int!
    }
    userSignup: { // args
      data: NexusGenInputs['UserSignupInput']; // UserSignupInput!
      scope: string; // String!
    }
  }
  Query: {
    userProfileRead: { // args
      scope: string; // String!
      userId: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: NexusResolverContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}