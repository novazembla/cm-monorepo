/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { NexusResolverContext } from "./../nexus-graphql/context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "EmailAddress";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    jwt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JWT";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
     */
    email<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "EmailAddress";
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
    /**
     * A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
     */
    jwt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JWT";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  EventUpsertInput: { // input type
    dates?: NexusGenScalars['JSON'] | null; // JSON
    description?: NexusGenScalars['JSON'] | null; // JSON
    heroImage?: NexusGenScalars['JSON'] | null; // JSON
    isFree: boolean; // Boolean!
    isImported: boolean; // Boolean!
    locations?: NexusGenScalars['JSON'] | null; // JSON
    owner: NexusGenScalars['JSON']; // JSON!
    primaryTerms?: NexusGenScalars['JSON'] | null; // JSON
    slug: NexusGenScalars['JSON']; // JSON!
    status: number; // Int!
    terms?: NexusGenScalars['JSON'] | null; // JSON
    title: NexusGenScalars['JSON']; // JSON!
  }
  ImageTranslationInput: { // input type
    id: number; // Int!
    translations: NexusGenScalars['JSON']; // JSON!
  }
  ImageUpdateInput: { // input type
    meta: NexusGenScalars['JSON']; // JSON!
    ownerId: number; // Int!
  }
  ImportUpsertInput: { // input type
    errors?: NexusGenScalars['JSON'] | null; // JSON
    log?: NexusGenScalars['JSON'] | null; // JSON
    mapping?: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
    title: string; // String!
    warnings?: NexusGenScalars['JSON'] | null; // JSON
  }
  LocationUpsertInput: { // input type
    accessibilityInformation?: NexusGenScalars['JSON'] | null; // JSON
    address?: NexusGenScalars['JSON'] | null; // JSON
    agency?: string | null; // String
    contactInfo?: NexusGenScalars['JSON'] | null; // JSON
    description?: NexusGenScalars['JSON'] | null; // JSON
    eventLocationId?: number | null; // Int
    heroImage?: NexusGenScalars['JSON'] | null; // JSON
    lat?: number | null; // Float
    lng?: number | null; // Float
    offers?: NexusGenScalars['JSON'] | null; // JSON
    owner: NexusGenScalars['JSON']; // JSON!
    primaryTerms?: NexusGenScalars['JSON'] | null; // JSON
    slug: NexusGenScalars['JSON']; // JSON!
    socialMedia?: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
    terms?: NexusGenScalars['JSON'] | null; // JSON
    title: NexusGenScalars['JSON']; // JSON!
  }
  PageUpsertInput: { // input type
    content: NexusGenScalars['JSON']; // JSON!
    heroImage?: NexusGenScalars['JSON'] | null; // JSON
    intro: NexusGenScalars['JSON']; // JSON!
    owner: NexusGenScalars['JSON']; // JSON!
    slug: NexusGenScalars['JSON']; // JSON!
    status: number; // Int!
    title: NexusGenScalars['JSON']; // JSON!
  }
  SettingsUpdateInput: { // input type
    key: string; // String!
    value: NexusGenScalars['JSON']; // JSON!
  }
  TaxonomyUpsertInput: { // input type
    collectPrimaryTerm: boolean; // Boolean!
    hasColor: boolean; // Boolean!
    isRequired: boolean; // Boolean!
    modules: NexusGenScalars['JSON']; // JSON!
    name: NexusGenScalars['JSON']; // JSON!
    slug: NexusGenScalars['JSON']; // JSON!
  }
  TermCreateInput: { // input type
    color?: string | null; // String
    colorDark?: string | null; // String
    name: NexusGenScalars['JSON']; // JSON!
    slug: NexusGenScalars['JSON']; // JSON!
    taxonomyId: number; // Int!
  }
  TermUpdateInput: { // input type
    color?: string | null; // String
    colorDark?: string | null; // String
    name: NexusGenScalars['JSON']; // JSON!
    slug: NexusGenScalars['JSON']; // JSON!
  }
  TourStopCreateInput: { // input type
    description: NexusGenScalars['JSON']; // JSON!
    locationId: number; // Int!
    teaser: NexusGenScalars['JSON']; // JSON!
    title: NexusGenScalars['JSON']; // JSON!
    tourId: number; // Int!
  }
  TourStopOrderInput: { // input type
    id?: number | null; // Int
    number?: number | null; // Int
  }
  TourStopUpdateInput: { // input type
    description: NexusGenScalars['JSON']; // JSON!
    heroImage?: NexusGenScalars['JSON'] | null; // JSON
    locationId: number; // Int!
    teaser: NexusGenScalars['JSON']; // JSON!
    title: NexusGenScalars['JSON']; // JSON!
    tourId?: number | null; // Int
  }
  TourUpsertInput: { // input type
    description: NexusGenScalars['JSON']; // JSON!
    distance: NexusGenScalars['JSON']; // JSON!
    duration: NexusGenScalars['JSON']; // JSON!
    heroImage?: NexusGenScalars['JSON'] | null; // JSON
    owner: NexusGenScalars['JSON']; // JSON!
    path: NexusGenScalars['JSON']; // JSON!
    slug: NexusGenScalars['JSON']; // JSON!
    status: number; // Int!
    teaser: NexusGenScalars['JSON']; // JSON!
    title: NexusGenScalars['JSON']; // JSON!
  }
  UserCreateInput: { // input type
    acceptedTerms: boolean; // Boolean!
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    ownsConentOnDelete: boolean; // Boolean!
    ownsEventImports: boolean; // Boolean!
    password: string; // String!
    role: string; // String!
    userBanned: boolean; // Boolean!
  }
  UserProfileUpdateInput: { // input type
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    firstName: string; // String!
    lastName: string; // String!
  }
  UserSignupInput: { // input type
    acceptedTerms: boolean; // Boolean!
    email: NexusGenScalars['EmailAddress']; // EmailAddress!
    firstName: string; // String!
    lastName: string; // String!
    password: string; // String!
  }
  UserUpdateInput: { // input type
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    ownsConentOnDelete: boolean; // Boolean!
    ownsEventImports: boolean; // Boolean!
    role: string; // String!
    userBanned: boolean; // Boolean!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  EmailAddress: any
  JSON: any
  JWT: any
}

export interface NexusGenObjects {
  AdminUser: { // root type
    firstName?: string | null; // String
    id?: number | null; // Int
    lastName?: string | null; // String
  }
  AuthPayload: { // root type
    tokens?: NexusGenRootTypes['AuthPayloadTokens'] | null; // AuthPayloadTokens
    user?: NexusGenRootTypes['AuthUser'] | null; // AuthUser
  }
  AuthPayloadToken: { // root type
    expires: string; // String!
    token?: NexusGenScalars['JWT'] | null; // JWT
  }
  AuthPayloadTokens: { // root type
    access?: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
    refresh?: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
  }
  AuthUser: { // root type
    id: number; // Int!
    permissions?: Array<string | null> | null; // [String]
    roles?: Array<string | null> | null; // [String]
  }
  BooleanResult: { // root type
    result: boolean; // Boolean!
  }
  Event: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    dates?: Array<NexusGenRootTypes['EventDate'] | null> | null; // [EventDate]
    heroImage?: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    isFree?: boolean | null; // Boolean
    isImported?: boolean | null; // Boolean
    locations?: Array<NexusGenRootTypes['Location'] | null> | null; // [Location]
    meta?: NexusGenScalars['JSON'] | null; // JSON
    ownerId: number; // Int!
    primaryTerms?: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    status: number; // Int!
    terms?: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  EventDate: { // root type
    begin?: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    date?: NexusGenScalars['DateTime'] | null; // DateTime
    end?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  EventImportLog: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    errors?: NexusGenScalars['JSON'] | null; // JSON
    id: number; // Int!
    log?: NexusGenScalars['JSON'] | null; // JSON
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    warnings?: NexusGenScalars['JSON'] | null; // JSON
  }
  EventImportLogQueryResult: { // root type
    eventImportLogs?: Array<NexusGenRootTypes['EventImportLog'] | null> | null; // [EventImportLog]
    totalCount?: number | null; // Int
  }
  EventQueryResult: { // root type
    events?: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
    totalCount?: number | null; // Int
  }
  GeoCodeResult: { // root type
    count: number; // Int!
    geojson: NexusGenScalars['JSON']; // JSON!
  }
  GeoPoint: { // root type
    lat?: number | null; // Float
    lng?: number | null; // Float
  }
  Image: { // root type
    alt?: NexusGenScalars['JSON'] | null; // JSON
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    credits?: NexusGenScalars['JSON'] | null; // JSON
    id: number; // Int!
    meta?: NexusGenScalars['JSON'] | null; // JSON
    nanoid?: string | null; // String
    orderNumber?: number | null; // Int
    ownerId: number; // Int!
    status?: number | null; // Int
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  ImageQueryResult: { // root type
    images?: Array<NexusGenRootTypes['Image'] | null> | null; // [Image]
    totalCount?: number | null; // Int
  }
  ImageStatus: { // root type
    id: number; // Int!
    meta?: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
  }
  Import: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    errors?: NexusGenScalars['JSON'] | null; // JSON
    file?: NexusGenScalars['JSON'] | null; // JSON
    id: number; // Int!
    log?: NexusGenScalars['JSON'] | null; // JSON
    mapping?: NexusGenScalars['JSON'] | null; // JSON
    status?: number | null; // Int
    title?: NexusGenScalars['JSON'] | null; // JSON
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    warnings?: NexusGenScalars['JSON'] | null; // JSON
  }
  ImportQueryResult: { // root type
    imports?: Array<NexusGenRootTypes['Import'] | null> | null; // [Import]
    totalCount?: number | null; // Int
  }
  Location: { // root type
    address?: NexusGenScalars['JSON'] | null; // JSON
    agency?: string | null; // String
    contactInfo?: NexusGenScalars['JSON'] | null; // JSON
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    eventLocationId?: number | null; // Int
    events?: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
    geoCodingInfo?: NexusGenScalars['JSON'] | null; // JSON
    heroImage?: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    lat?: number | null; // Float
    lng?: number | null; // Float
    ownerId: number; // Int!
    primaryTerms?: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    socialMedia?: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
    terms?: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    visibleFrom?: NexusGenScalars['DateTime'] | null; // DateTime
    visibleFromTime?: NexusGenScalars['DateTime'] | null; // DateTime
    visibleUntil?: NexusGenScalars['DateTime'] | null; // DateTime
    visibleUntilTime?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  LocationQueryResult: { // root type
    locations?: Array<NexusGenRootTypes['Location'] | null> | null; // [Location]
    totalCount?: number | null; // Int
  }
  Module: { // root type
    id: number; // Int!
    key?: string | null; // String
    name?: NexusGenScalars['JSON'] | null; // JSON
    withTaxonomies?: boolean | null; // Boolean
  }
  Mutation: {};
  Page: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    fullText?: string | null; // String
    heroImage?: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    ownerId: number; // Int!
    status: number; // Int!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PageQueryResult: { // root type
    pages?: Array<NexusGenRootTypes['Page'] | null> | null; // [Page]
    totalCount?: number | null; // Int
  }
  ProfileUser: { // root type
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified?: boolean | null; // Boolean
    firstName?: string | null; // String
    id: number; // Int!
    lastName?: string | null; // String
    profileImageId?: number | null; // Int
  }
  Query: {};
  SearchResult: { // root type
    items?: Array<NexusGenRootTypes['SearchResultItem'] | null> | null; // [SearchResultItem]
    module: string; // String!
    totalCount: number; // Int!
  }
  SearchResultItem: { // root type
    dates?: Array<NexusGenRootTypes['EventDate'] | null> | null; // [EventDate]
    excerpt?: NexusGenScalars['JSON'] | null; // JSON
    geopoint?: NexusGenRootTypes['GeoPoint'] | null; // GeoPoint
    id: number; // Int!
    locations?: Array<NexusGenRootTypes['Location'] | null> | null; // [Location]
    slug: NexusGenScalars['JSON']; // JSON!
    title: NexusGenScalars['JSON']; // JSON!
    type: string; // String!
  }
  Setting: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    key?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    value?: NexusGenScalars['JSON'] | null; // JSON
  }
  Taxonomy: { // root type
    collectPrimaryTerm?: boolean | null; // Boolean
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    hasColor?: boolean | null; // Boolean
    id: number; // Int!
    isRequired?: boolean | null; // Boolean
    modules?: Array<NexusGenRootTypes['Module'] | null> | null; // [Module]
    terms?: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TaxonomyQueryResult: { // root type
    taxonomies?: Array<NexusGenRootTypes['Taxonomy'] | null> | null; // [Taxonomy]
    totalCount?: number | null; // Int
  }
  Term: { // root type
    color?: string | null; // String
    colorDark?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    taxonomy?: NexusGenRootTypes['Taxonomy'] | null; // Taxonomy
    taxonomyId: number; // Int!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TermQueryResult: { // root type
    terms?: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    totalCount?: number | null; // Int
  }
  Tour: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    heroImage?: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    modules?: Array<NexusGenRootTypes['Module'] | null> | null; // [Module]
    orderNumber?: number | null; // Int
    ownerId: number; // Int!
    path: NexusGenScalars['JSON']; // JSON!
    status: number; // Int!
    tourStops?: Array<NexusGenRootTypes['TourStop'] | null> | null; // [TourStop]
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TourQueryResult: { // root type
    totalCount?: number | null; // Int
    tours?: Array<NexusGenRootTypes['Tour'] | null> | null; // [Tour]
  }
  TourStop: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    heroImage?: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    location?: NexusGenRootTypes['Location'] | null; // Location
    locationId?: number | null; // Int
    number?: number | null; // Int
    tour?: NexusGenRootTypes['Tour'] | null; // Tour
    tourId?: number | null; // Int
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TourStopQueryResult: { // root type
    totalCount?: number | null; // Int
    tourStops?: Array<NexusGenRootTypes['TourStop'] | null> | null; // [TourStop]
  }
  User: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    email?: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified?: boolean | null; // Boolean
    firstName?: string | null; // String
    id: number; // Int!
    lastName?: string | null; // String
    ownsConentOnDelete?: boolean | null; // Boolean
    ownsEventImports?: boolean | null; // Boolean
    profileImageId?: number | null; // Int
    role?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userBanned?: boolean | null; // Boolean
  }
  UsersQueryResult: { // root type
    totalCount?: number | null; // Int
    users?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
}

export interface NexusGenInterfaces {
  UserBaseNode: NexusGenRootTypes['ProfileUser'] | NexusGenRootTypes['User'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AdminUser: { // field return type
    firstName: string | null; // String
    id: number | null; // Int
    lastName: string | null; // String
  }
  AuthPayload: { // field return type
    tokens: NexusGenRootTypes['AuthPayloadTokens'] | null; // AuthPayloadTokens
    user: NexusGenRootTypes['AuthUser'] | null; // AuthUser
  }
  AuthPayloadToken: { // field return type
    expires: string; // String!
    token: NexusGenScalars['JWT'] | null; // JWT
  }
  AuthPayloadTokens: { // field return type
    access: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
    refresh: NexusGenRootTypes['AuthPayloadToken'] | null; // AuthPayloadToken
  }
  AuthUser: { // field return type
    id: number; // Int!
    permissions: Array<string | null> | null; // [String]
    roles: Array<string | null> | null; // [String]
  }
  BooleanResult: { // field return type
    result: boolean; // Boolean!
  }
  Event: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    dates: Array<NexusGenRootTypes['EventDate'] | null> | null; // [EventDate]
    description: NexusGenScalars['JSON'] | null; // JSON
    heroImage: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    isFree: boolean | null; // Boolean
    isImported: boolean | null; // Boolean
    locations: Array<NexusGenRootTypes['Location'] | null> | null; // [Location]
    meta: NexusGenScalars['JSON'] | null; // JSON
    ownerId: number; // Int!
    primaryTerms: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    slug: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
    terms: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    title: NexusGenScalars['JSON'] | null; // JSON
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  EventDate: { // field return type
    begin: NexusGenScalars['DateTime'] | null; // DateTime
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    date: NexusGenScalars['DateTime'] | null; // DateTime
    end: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  EventImportLog: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    errors: NexusGenScalars['JSON'] | null; // JSON
    id: number; // Int!
    log: NexusGenScalars['JSON'] | null; // JSON
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    warnings: NexusGenScalars['JSON'] | null; // JSON
  }
  EventImportLogQueryResult: { // field return type
    eventImportLogs: Array<NexusGenRootTypes['EventImportLog'] | null> | null; // [EventImportLog]
    totalCount: number | null; // Int
  }
  EventQueryResult: { // field return type
    events: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
    totalCount: number | null; // Int
  }
  GeoCodeResult: { // field return type
    count: number; // Int!
    geojson: NexusGenScalars['JSON']; // JSON!
  }
  GeoPoint: { // field return type
    lat: number | null; // Float
    lng: number | null; // Float
  }
  Image: { // field return type
    alt: NexusGenScalars['JSON'] | null; // JSON
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    credits: NexusGenScalars['JSON'] | null; // JSON
    id: number; // Int!
    meta: NexusGenScalars['JSON'] | null; // JSON
    nanoid: string | null; // String
    orderNumber: number | null; // Int
    ownerId: number; // Int!
    status: number | null; // Int
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  ImageQueryResult: { // field return type
    images: Array<NexusGenRootTypes['Image'] | null> | null; // [Image]
    totalCount: number | null; // Int
  }
  ImageStatus: { // field return type
    id: number; // Int!
    meta: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
  }
  Import: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    errors: NexusGenScalars['JSON'] | null; // JSON
    file: NexusGenScalars['JSON'] | null; // JSON
    id: number; // Int!
    log: NexusGenScalars['JSON'] | null; // JSON
    mapping: NexusGenScalars['JSON'] | null; // JSON
    status: number | null; // Int
    title: NexusGenScalars['JSON'] | null; // JSON
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    warnings: NexusGenScalars['JSON'] | null; // JSON
  }
  ImportQueryResult: { // field return type
    imports: Array<NexusGenRootTypes['Import'] | null> | null; // [Import]
    totalCount: number | null; // Int
  }
  Location: { // field return type
    accessibilityInformation: NexusGenScalars['JSON'] | null; // JSON
    address: NexusGenScalars['JSON'] | null; // JSON
    agency: string | null; // String
    contactInfo: NexusGenScalars['JSON'] | null; // JSON
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: NexusGenScalars['JSON'] | null; // JSON
    eventLocationId: number | null; // Int
    events: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
    geoCodingInfo: NexusGenScalars['JSON'] | null; // JSON
    heroImage: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    lat: number | null; // Float
    lng: number | null; // Float
    offers: NexusGenScalars['JSON'] | null; // JSON
    ownerId: number; // Int!
    primaryTerms: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    slug: NexusGenScalars['JSON'] | null; // JSON
    socialMedia: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
    terms: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    title: NexusGenScalars['JSON'] | null; // JSON
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    visibleFrom: NexusGenScalars['DateTime'] | null; // DateTime
    visibleFromTime: NexusGenScalars['DateTime'] | null; // DateTime
    visibleUntil: NexusGenScalars['DateTime'] | null; // DateTime
    visibleUntilTime: NexusGenScalars['DateTime'] | null; // DateTime
  }
  LocationQueryResult: { // field return type
    locations: Array<NexusGenRootTypes['Location'] | null> | null; // [Location]
    totalCount: number | null; // Int
  }
  Module: { // field return type
    id: number; // Int!
    key: string | null; // String
    name: NexusGenScalars['JSON'] | null; // JSON
    withTaxonomies: boolean | null; // Boolean
  }
  Mutation: { // field return type
    authLogin: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    authLogout: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authPasswordRequest: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authPasswordReset: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authRefresh: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    authRequestEmailVerificationEmail: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    authVerifyEmail: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    eventCreate: NexusGenRootTypes['Event']; // Event!
    eventDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    eventUpdate: NexusGenRootTypes['Event']; // Event!
    imageDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    imageUpdate: NexusGenRootTypes['Image']; // Image!
    importCreate: NexusGenRootTypes['Import']; // Import!
    importDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    importFileDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    importUpdate: NexusGenRootTypes['Import']; // Import!
    locationCreate: NexusGenRootTypes['Location']; // Location!
    locationDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    locationUpdate: NexusGenRootTypes['Location']; // Location!
    pageCreate: NexusGenRootTypes['Page']; // Page!
    pageDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    pageUpdate: NexusGenRootTypes['Page']; // Page!
    settingsUpdate: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    taxonomyCreate: NexusGenRootTypes['Taxonomy']; // Taxonomy!
    taxonomyDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    taxonomyUpdate: NexusGenRootTypes['Taxonomy']; // Taxonomy!
    termCreate: NexusGenRootTypes['Term']; // Term!
    termDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    termUpdate: NexusGenRootTypes['Term']; // Term!
    tourCreate: NexusGenRootTypes['Tour']; // Tour!
    tourDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    tourReorderTourStops: NexusGenRootTypes['Tour']; // Tour!
    tourStopCreate: NexusGenRootTypes['TourStop']; // TourStop!
    tourStopDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    tourStopUpdate: NexusGenRootTypes['TourStop']; // TourStop!
    tourUpdate: NexusGenRootTypes['Tour']; // Tour!
    userCreate: NexusGenRootTypes['User']; // User!
    userDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    userProfileImageDelete: NexusGenRootTypes['BooleanResult']; // BooleanResult!
    userProfilePasswordUpdate: NexusGenRootTypes['User']; // User!
    userProfileUpdate: NexusGenRootTypes['User']; // User!
    userSignup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    userUpdate: NexusGenRootTypes['BooleanResult']; // BooleanResult!
  }
  Page: { // field return type
    content: NexusGenScalars['JSON'] | null; // JSON
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    fullText: string | null; // String
    heroImage: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    intro: NexusGenScalars['JSON'] | null; // JSON
    ownerId: number; // Int!
    slug: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
    title: NexusGenScalars['JSON'] | null; // JSON
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PageQueryResult: { // field return type
    pages: Array<NexusGenRootTypes['Page'] | null> | null; // [Page]
    totalCount: number | null; // Int
  }
  ProfileUser: { // field return type
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified: boolean | null; // Boolean
    firstName: string | null; // String
    id: number; // Int!
    lastName: string | null; // String
    profileImage: NexusGenRootTypes['Image'] | null; // Image
    profileImageId: number | null; // Int
  }
  Query: { // field return type
    adminUsers: Array<NexusGenRootTypes['AdminUser'] | null> | null; // [AdminUser]
    event: NexusGenRootTypes['Event']; // Event!
    eventImportLog: NexusGenRootTypes['EventImportLog']; // EventImportLog!
    eventImportLogs: NexusGenRootTypes['EventImportLogQueryResult'] | null; // EventImportLogQueryResult
    events: NexusGenRootTypes['EventQueryResult'] | null; // EventQueryResult
    geocode: NexusGenRootTypes['GeoCodeResult'] | null; // GeoCodeResult
    imageRead: NexusGenRootTypes['Image']; // Image!
    imageStatus: NexusGenRootTypes['ImageStatus']; // ImageStatus!
    images: NexusGenRootTypes['ImageQueryResult'] | null; // ImageQueryResult
    importRead: NexusGenRootTypes['Import']; // Import!
    imports: NexusGenRootTypes['ImportQueryResult'] | null; // ImportQueryResult
    location: NexusGenRootTypes['Location']; // Location!
    locations: NexusGenRootTypes['LocationQueryResult'] | null; // LocationQueryResult
    moduleTaxonomies: Array<NexusGenRootTypes['Taxonomy'] | null> | null; // [Taxonomy]
    modules: Array<NexusGenRootTypes['Module'] | null> | null; // [Module]
    page: NexusGenRootTypes['Page']; // Page!
    pages: NexusGenRootTypes['PageQueryResult'] | null; // PageQueryResult
    quickSearch: Array<NexusGenRootTypes['SearchResult'] | null> | null; // [SearchResult]
    setting: Array<NexusGenRootTypes['Setting'] | null> | null; // [Setting]
    settings: Array<NexusGenRootTypes['Setting'] | null> | null; // [Setting]
    taxonomies: NexusGenRootTypes['TaxonomyQueryResult'] | null; // TaxonomyQueryResult
    taxonomy: NexusGenRootTypes['Taxonomy']; // Taxonomy!
    term: NexusGenRootTypes['Term']; // Term!
    terms: NexusGenRootTypes['TermQueryResult'] | null; // TermQueryResult
    tour: NexusGenRootTypes['Tour']; // Tour!
    tourStopRead: NexusGenRootTypes['TourStop']; // TourStop!
    tours: NexusGenRootTypes['TourQueryResult'] | null; // TourQueryResult
    userProfileRead: NexusGenRootTypes['ProfileUser']; // ProfileUser!
    userRead: NexusGenRootTypes['User']; // User!
    users: NexusGenRootTypes['UsersQueryResult'] | null; // UsersQueryResult
  }
  SearchResult: { // field return type
    items: Array<NexusGenRootTypes['SearchResultItem'] | null> | null; // [SearchResultItem]
    module: string; // String!
    totalCount: number; // Int!
  }
  SearchResultItem: { // field return type
    dates: Array<NexusGenRootTypes['EventDate'] | null> | null; // [EventDate]
    excerpt: NexusGenScalars['JSON'] | null; // JSON
    geopoint: NexusGenRootTypes['GeoPoint'] | null; // GeoPoint
    id: number; // Int!
    locations: Array<NexusGenRootTypes['Location'] | null> | null; // [Location]
    slug: NexusGenScalars['JSON']; // JSON!
    title: NexusGenScalars['JSON']; // JSON!
    type: string; // String!
  }
  Setting: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    key: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    value: NexusGenScalars['JSON'] | null; // JSON
  }
  Taxonomy: { // field return type
    collectPrimaryTerm: boolean | null; // Boolean
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    hasColor: boolean | null; // Boolean
    id: number; // Int!
    isRequired: boolean | null; // Boolean
    modules: Array<NexusGenRootTypes['Module'] | null> | null; // [Module]
    name: NexusGenScalars['JSON'] | null; // JSON
    slug: NexusGenScalars['JSON'] | null; // JSON
    termCount: number | null; // Int
    terms: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TaxonomyQueryResult: { // field return type
    taxonomies: Array<NexusGenRootTypes['Taxonomy'] | null> | null; // [Taxonomy]
    totalCount: number | null; // Int
  }
  Term: { // field return type
    color: string | null; // String
    colorDark: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: number; // Int!
    name: NexusGenScalars['JSON'] | null; // JSON
    slug: NexusGenScalars['JSON'] | null; // JSON
    taxonomy: NexusGenRootTypes['Taxonomy'] | null; // Taxonomy
    taxonomyId: number; // Int!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TermQueryResult: { // field return type
    terms: Array<NexusGenRootTypes['Term'] | null> | null; // [Term]
    totalCount: number | null; // Int
  }
  Tour: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: NexusGenScalars['JSON'] | null; // JSON
    distance: NexusGenScalars['JSON'] | null; // JSON
    duration: NexusGenScalars['JSON'] | null; // JSON
    heroImage: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    modules: Array<NexusGenRootTypes['Module'] | null> | null; // [Module]
    orderNumber: number | null; // Int
    ownerId: number; // Int!
    path: NexusGenScalars['JSON']; // JSON!
    slug: NexusGenScalars['JSON'] | null; // JSON
    status: number; // Int!
    teaser: NexusGenScalars['JSON'] | null; // JSON
    title: NexusGenScalars['JSON'] | null; // JSON
    tourStopCount: number | null; // Int
    tourStops: Array<NexusGenRootTypes['TourStop'] | null> | null; // [TourStop]
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TourQueryResult: { // field return type
    totalCount: number | null; // Int
    tours: Array<NexusGenRootTypes['Tour'] | null> | null; // [Tour]
  }
  TourStop: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: NexusGenScalars['JSON'] | null; // JSON
    heroImage: NexusGenRootTypes['Image'] | null; // Image
    id: number; // Int!
    location: NexusGenRootTypes['Location'] | null; // Location
    locationId: number | null; // Int
    number: number | null; // Int
    teaser: NexusGenScalars['JSON'] | null; // JSON
    title: NexusGenScalars['JSON'] | null; // JSON
    tour: NexusGenRootTypes['Tour'] | null; // Tour
    tourId: number | null; // Int
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  TourStopQueryResult: { // field return type
    totalCount: number | null; // Int
    tourStops: Array<NexusGenRootTypes['TourStop'] | null> | null; // [TourStop]
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified: boolean | null; // Boolean
    firstName: string | null; // String
    id: number; // Int!
    lastName: string | null; // String
    ownsConentOnDelete: boolean | null; // Boolean
    ownsEventImports: boolean | null; // Boolean
    profileImageId: number | null; // Int
    role: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    userBanned: boolean | null; // Boolean
  }
  UsersQueryResult: { // field return type
    totalCount: number | null; // Int
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  UserBaseNode: { // field return type
    email: NexusGenScalars['EmailAddress'] | null; // EmailAddress
    emailVerified: boolean | null; // Boolean
    firstName: string | null; // String
    id: number; // Int!
    lastName: string | null; // String
    profileImageId: number | null; // Int
  }
}

export interface NexusGenFieldTypeNames {
  AdminUser: { // field return type name
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
  }
  AuthPayload: { // field return type name
    tokens: 'AuthPayloadTokens'
    user: 'AuthUser'
  }
  AuthPayloadToken: { // field return type name
    expires: 'String'
    token: 'JWT'
  }
  AuthPayloadTokens: { // field return type name
    access: 'AuthPayloadToken'
    refresh: 'AuthPayloadToken'
  }
  AuthUser: { // field return type name
    id: 'Int'
    permissions: 'String'
    roles: 'String'
  }
  BooleanResult: { // field return type name
    result: 'Boolean'
  }
  Event: { // field return type name
    createdAt: 'DateTime'
    dates: 'EventDate'
    description: 'JSON'
    heroImage: 'Image'
    id: 'Int'
    isFree: 'Boolean'
    isImported: 'Boolean'
    locations: 'Location'
    meta: 'JSON'
    ownerId: 'Int'
    primaryTerms: 'Term'
    slug: 'JSON'
    status: 'Int'
    terms: 'Term'
    title: 'JSON'
    updatedAt: 'DateTime'
  }
  EventDate: { // field return type name
    begin: 'DateTime'
    createdAt: 'DateTime'
    date: 'DateTime'
    end: 'DateTime'
    id: 'Int'
    updatedAt: 'DateTime'
  }
  EventImportLog: { // field return type name
    createdAt: 'DateTime'
    errors: 'JSON'
    id: 'Int'
    log: 'JSON'
    updatedAt: 'DateTime'
    warnings: 'JSON'
  }
  EventImportLogQueryResult: { // field return type name
    eventImportLogs: 'EventImportLog'
    totalCount: 'Int'
  }
  EventQueryResult: { // field return type name
    events: 'Event'
    totalCount: 'Int'
  }
  GeoCodeResult: { // field return type name
    count: 'Int'
    geojson: 'JSON'
  }
  GeoPoint: { // field return type name
    lat: 'Float'
    lng: 'Float'
  }
  Image: { // field return type name
    alt: 'JSON'
    createdAt: 'DateTime'
    credits: 'JSON'
    id: 'Int'
    meta: 'JSON'
    nanoid: 'String'
    orderNumber: 'Int'
    ownerId: 'Int'
    status: 'Int'
    updatedAt: 'DateTime'
  }
  ImageQueryResult: { // field return type name
    images: 'Image'
    totalCount: 'Int'
  }
  ImageStatus: { // field return type name
    id: 'Int'
    meta: 'JSON'
    status: 'Int'
  }
  Import: { // field return type name
    createdAt: 'DateTime'
    errors: 'JSON'
    file: 'JSON'
    id: 'Int'
    log: 'JSON'
    mapping: 'JSON'
    status: 'Int'
    title: 'JSON'
    updatedAt: 'DateTime'
    warnings: 'JSON'
  }
  ImportQueryResult: { // field return type name
    imports: 'Import'
    totalCount: 'Int'
  }
  Location: { // field return type name
    accessibilityInformation: 'JSON'
    address: 'JSON'
    agency: 'String'
    contactInfo: 'JSON'
    createdAt: 'DateTime'
    description: 'JSON'
    eventLocationId: 'Int'
    events: 'Event'
    geoCodingInfo: 'JSON'
    heroImage: 'Image'
    id: 'Int'
    lat: 'Float'
    lng: 'Float'
    offers: 'JSON'
    ownerId: 'Int'
    primaryTerms: 'Term'
    slug: 'JSON'
    socialMedia: 'JSON'
    status: 'Int'
    terms: 'Term'
    title: 'JSON'
    updatedAt: 'DateTime'
    visibleFrom: 'DateTime'
    visibleFromTime: 'DateTime'
    visibleUntil: 'DateTime'
    visibleUntilTime: 'DateTime'
  }
  LocationQueryResult: { // field return type name
    locations: 'Location'
    totalCount: 'Int'
  }
  Module: { // field return type name
    id: 'Int'
    key: 'String'
    name: 'JSON'
    withTaxonomies: 'Boolean'
  }
  Mutation: { // field return type name
    authLogin: 'AuthPayload'
    authLogout: 'BooleanResult'
    authPasswordRequest: 'BooleanResult'
    authPasswordReset: 'BooleanResult'
    authRefresh: 'AuthPayload'
    authRequestEmailVerificationEmail: 'BooleanResult'
    authVerifyEmail: 'BooleanResult'
    eventCreate: 'Event'
    eventDelete: 'BooleanResult'
    eventUpdate: 'Event'
    imageDelete: 'BooleanResult'
    imageUpdate: 'Image'
    importCreate: 'Import'
    importDelete: 'BooleanResult'
    importFileDelete: 'BooleanResult'
    importUpdate: 'Import'
    locationCreate: 'Location'
    locationDelete: 'BooleanResult'
    locationUpdate: 'Location'
    pageCreate: 'Page'
    pageDelete: 'BooleanResult'
    pageUpdate: 'Page'
    settingsUpdate: 'BooleanResult'
    taxonomyCreate: 'Taxonomy'
    taxonomyDelete: 'BooleanResult'
    taxonomyUpdate: 'Taxonomy'
    termCreate: 'Term'
    termDelete: 'BooleanResult'
    termUpdate: 'Term'
    tourCreate: 'Tour'
    tourDelete: 'BooleanResult'
    tourReorderTourStops: 'Tour'
    tourStopCreate: 'TourStop'
    tourStopDelete: 'BooleanResult'
    tourStopUpdate: 'TourStop'
    tourUpdate: 'Tour'
    userCreate: 'User'
    userDelete: 'BooleanResult'
    userProfileImageDelete: 'BooleanResult'
    userProfilePasswordUpdate: 'User'
    userProfileUpdate: 'User'
    userSignup: 'AuthPayload'
    userUpdate: 'BooleanResult'
  }
  Page: { // field return type name
    content: 'JSON'
    createdAt: 'DateTime'
    fullText: 'String'
    heroImage: 'Image'
    id: 'Int'
    intro: 'JSON'
    ownerId: 'Int'
    slug: 'JSON'
    status: 'Int'
    title: 'JSON'
    updatedAt: 'DateTime'
  }
  PageQueryResult: { // field return type name
    pages: 'Page'
    totalCount: 'Int'
  }
  ProfileUser: { // field return type name
    email: 'EmailAddress'
    emailVerified: 'Boolean'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    profileImage: 'Image'
    profileImageId: 'Int'
  }
  Query: { // field return type name
    adminUsers: 'AdminUser'
    event: 'Event'
    eventImportLog: 'EventImportLog'
    eventImportLogs: 'EventImportLogQueryResult'
    events: 'EventQueryResult'
    geocode: 'GeoCodeResult'
    imageRead: 'Image'
    imageStatus: 'ImageStatus'
    images: 'ImageQueryResult'
    importRead: 'Import'
    imports: 'ImportQueryResult'
    location: 'Location'
    locations: 'LocationQueryResult'
    moduleTaxonomies: 'Taxonomy'
    modules: 'Module'
    page: 'Page'
    pages: 'PageQueryResult'
    quickSearch: 'SearchResult'
    setting: 'Setting'
    settings: 'Setting'
    taxonomies: 'TaxonomyQueryResult'
    taxonomy: 'Taxonomy'
    term: 'Term'
    terms: 'TermQueryResult'
    tour: 'Tour'
    tourStopRead: 'TourStop'
    tours: 'TourQueryResult'
    userProfileRead: 'ProfileUser'
    userRead: 'User'
    users: 'UsersQueryResult'
  }
  SearchResult: { // field return type name
    items: 'SearchResultItem'
    module: 'String'
    totalCount: 'Int'
  }
  SearchResultItem: { // field return type name
    dates: 'EventDate'
    excerpt: 'JSON'
    geopoint: 'GeoPoint'
    id: 'Int'
    locations: 'Location'
    slug: 'JSON'
    title: 'JSON'
    type: 'String'
  }
  Setting: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    key: 'String'
    updatedAt: 'DateTime'
    value: 'JSON'
  }
  Taxonomy: { // field return type name
    collectPrimaryTerm: 'Boolean'
    createdAt: 'DateTime'
    hasColor: 'Boolean'
    id: 'Int'
    isRequired: 'Boolean'
    modules: 'Module'
    name: 'JSON'
    slug: 'JSON'
    termCount: 'Int'
    terms: 'Term'
    updatedAt: 'DateTime'
  }
  TaxonomyQueryResult: { // field return type name
    taxonomies: 'Taxonomy'
    totalCount: 'Int'
  }
  Term: { // field return type name
    color: 'String'
    colorDark: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    name: 'JSON'
    slug: 'JSON'
    taxonomy: 'Taxonomy'
    taxonomyId: 'Int'
    updatedAt: 'DateTime'
  }
  TermQueryResult: { // field return type name
    terms: 'Term'
    totalCount: 'Int'
  }
  Tour: { // field return type name
    createdAt: 'DateTime'
    description: 'JSON'
    distance: 'JSON'
    duration: 'JSON'
    heroImage: 'Image'
    id: 'Int'
    modules: 'Module'
    orderNumber: 'Int'
    ownerId: 'Int'
    path: 'JSON'
    slug: 'JSON'
    status: 'Int'
    teaser: 'JSON'
    title: 'JSON'
    tourStopCount: 'Int'
    tourStops: 'TourStop'
    updatedAt: 'DateTime'
  }
  TourQueryResult: { // field return type name
    totalCount: 'Int'
    tours: 'Tour'
  }
  TourStop: { // field return type name
    createdAt: 'DateTime'
    description: 'JSON'
    heroImage: 'Image'
    id: 'Int'
    location: 'Location'
    locationId: 'Int'
    number: 'Int'
    teaser: 'JSON'
    title: 'JSON'
    tour: 'Tour'
    tourId: 'Int'
    updatedAt: 'DateTime'
  }
  TourStopQueryResult: { // field return type name
    totalCount: 'Int'
    tourStops: 'TourStop'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'EmailAddress'
    emailVerified: 'Boolean'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    ownsConentOnDelete: 'Boolean'
    ownsEventImports: 'Boolean'
    profileImageId: 'Int'
    role: 'String'
    updatedAt: 'DateTime'
    userBanned: 'Boolean'
  }
  UsersQueryResult: { // field return type name
    totalCount: 'Int'
    users: 'User'
  }
  UserBaseNode: { // field return type name
    email: 'EmailAddress'
    emailVerified: 'Boolean'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
    profileImageId: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    authLogin: { // args
      email: NexusGenScalars['EmailAddress']; // EmailAddress!
      password: string; // String!
      scope: string; // String!
    }
    authLogout: { // args
      userId: number; // Int!
    }
    authPasswordRequest: { // args
      email: NexusGenScalars['EmailAddress']; // EmailAddress!
      scope: string; // String!
    }
    authPasswordReset: { // args
      password: string; // String!
      token: string; // String!
    }
    authRefresh: { // args
      scope: string; // String!
    }
    authRequestEmailVerificationEmail: { // args
      scope: string; // String!
      userId: number; // Int!
    }
    authVerifyEmail: { // args
      token: string; // String!
    }
    eventCreate: { // args
      data: NexusGenInputs['EventUpsertInput']; // EventUpsertInput!
    }
    eventDelete: { // args
      id: number; // Int!
    }
    eventUpdate: { // args
      data: NexusGenInputs['EventUpsertInput']; // EventUpsertInput!
      id: number; // Int!
      imagesTranslations?: Array<NexusGenInputs['ImageTranslationInput'] | null> | null; // [ImageTranslationInput]
    }
    imageDelete: { // args
      id: number; // Int!
    }
    imageUpdate: { // args
      data: NexusGenInputs['ImageUpdateInput']; // ImageUpdateInput!
      id: number; // Int!
    }
    importCreate: { // args
      data: NexusGenInputs['ImportUpsertInput']; // ImportUpsertInput!
    }
    importDelete: { // args
      id: number; // Int!
    }
    importFileDelete: { // args
      id: number; // Int!
    }
    importUpdate: { // args
      data: NexusGenInputs['ImportUpsertInput']; // ImportUpsertInput!
      id: number; // Int!
    }
    locationCreate: { // args
      data: NexusGenInputs['LocationUpsertInput']; // LocationUpsertInput!
    }
    locationDelete: { // args
      id: number; // Int!
    }
    locationUpdate: { // args
      data: NexusGenInputs['LocationUpsertInput']; // LocationUpsertInput!
      id: number; // Int!
      imagesTranslations?: Array<NexusGenInputs['ImageTranslationInput'] | null> | null; // [ImageTranslationInput]
    }
    pageCreate: { // args
      data: NexusGenInputs['PageUpsertInput']; // PageUpsertInput!
    }
    pageDelete: { // args
      id: number; // Int!
    }
    pageUpdate: { // args
      data: NexusGenInputs['PageUpsertInput']; // PageUpsertInput!
      id: number; // Int!
      imagesTranslations?: Array<NexusGenInputs['ImageTranslationInput'] | null> | null; // [ImageTranslationInput]
    }
    settingsUpdate: { // args
      data?: NexusGenInputs['SettingsUpdateInput'][] | null; // [SettingsUpdateInput!]
    }
    taxonomyCreate: { // args
      data: NexusGenInputs['TaxonomyUpsertInput']; // TaxonomyUpsertInput!
    }
    taxonomyDelete: { // args
      id: number; // Int!
    }
    taxonomyUpdate: { // args
      data: NexusGenInputs['TaxonomyUpsertInput']; // TaxonomyUpsertInput!
      id: number; // Int!
    }
    termCreate: { // args
      data: NexusGenInputs['TermCreateInput']; // TermCreateInput!
    }
    termDelete: { // args
      id: number; // Int!
    }
    termUpdate: { // args
      data: NexusGenInputs['TermUpdateInput']; // TermUpdateInput!
      id: number; // Int!
    }
    tourCreate: { // args
      data: NexusGenInputs['TourUpsertInput']; // TourUpsertInput!
    }
    tourDelete: { // args
      id: number; // Int!
    }
    tourReorderTourStops: { // args
      data: Array<NexusGenInputs['TourStopOrderInput'] | null>; // [TourStopOrderInput]!
      id: number; // Int!
    }
    tourStopCreate: { // args
      data: NexusGenInputs['TourStopCreateInput']; // TourStopCreateInput!
    }
    tourStopDelete: { // args
      id: number; // Int!
    }
    tourStopUpdate: { // args
      data: NexusGenInputs['TourStopUpdateInput']; // TourStopUpdateInput!
      id: number; // Int!
      imagesTranslations?: Array<NexusGenInputs['ImageTranslationInput'] | null> | null; // [ImageTranslationInput]
    }
    tourUpdate: { // args
      data: NexusGenInputs['TourUpsertInput']; // TourUpsertInput!
      id: number; // Int!
      imagesTranslations?: Array<NexusGenInputs['ImageTranslationInput'] | null> | null; // [ImageTranslationInput]
    }
    userCreate: { // args
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
      scope: string; // String!
    }
    userDelete: { // args
      id: number; // Int!
      scope: string; // String!
    }
    userProfileImageDelete: { // args
      id: number; // Int!
      scope: string; // String!
    }
    userProfilePasswordUpdate: { // args
      id: number; // Int!
      password: string; // String!
      scope: string; // String!
    }
    userProfileUpdate: { // args
      data: NexusGenInputs['UserProfileUpdateInput']; // UserProfileUpdateInput!
      id: number; // Int!
      scope: string; // String!
    }
    userSignup: { // args
      data: NexusGenInputs['UserSignupInput']; // UserSignupInput!
      scope: string; // String!
    }
    userUpdate: { // args
      data: NexusGenInputs['UserUpdateInput']; // UserUpdateInput!
      id: number; // Int!
      scope: string; // String!
    }
  }
  Query: {
    adminUsers: { // args
      roles: Array<string | null>; // [String]!
    }
    event: { // args
      id?: number | null; // Int
      slug?: string | null; // String
    }
    eventImportLog: { // args
      id: number; // Int!
    }
    eventImportLogs: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    events: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    geocode: { // args
      q: string; // String!
    }
    imageRead: { // args
      id: number; // Int!
    }
    imageStatus: { // args
      id: number; // Int!
    }
    images: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      taxonomyId?: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    importRead: { // args
      id: number; // Int!
    }
    imports: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    location: { // args
      id?: number | null; // Int
      slug?: string | null; // String
    }
    locations: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    moduleTaxonomies: { // args
      key: string; // String!
    }
    page: { // args
      id?: number | null; // Int
      slug?: string | null; // String
    }
    pages: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    quickSearch: { // args
      modules?: Array<string | null> | null; // [String]
      search: string; // String!
      termIds?: Array<number | null> | null; // [Int]
    }
    setting: { // args
      id: number; // Int!
    }
    taxonomies: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    taxonomy: { // args
      id: number; // Int!
    }
    term: { // args
      id: number; // Int!
    }
    terms: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      taxonomyId: number; // Int!
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    tour: { // args
      id?: number | null; // Int
      slug?: string | null; // String
    }
    tourStopRead: { // args
      id: number; // Int!
    }
    tours: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
    userProfileRead: { // args
      id: number; // Int!
      scope: string; // String!
    }
    userRead: { // args
      id: number; // Int!
      scope: string; // String!
    }
    users: { // args
      orderBy?: NexusGenScalars['JSON'] | null; // JSON
      pageIndex?: number | null; // Int
      pageSize: number | null; // Int
      where?: NexusGenScalars['JSON'] | null; // JSON
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  UserBaseNode: "ProfileUser" | "User"
}

export interface NexusGenTypeInterfaces {
  ProfileUser: "UserBaseNode"
  User: "UserBaseNode"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "UserBaseNode";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: NexusResolverContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}