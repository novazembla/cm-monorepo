### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AdminUser {
  firstName: String
  id: Int
  lastName: String
}

type AuthPayload {
  tokens: AuthPayloadTokens
  user: AuthUser
}

type AuthPayloadToken {
  expires: String!
  token: JWT
}

type AuthPayloadTokens {
  access: AuthPayloadToken
  preview: AuthPayloadToken
  refresh: AuthPayloadToken
}

type AuthUser {
  """Id of the user"""
  id: Int!

  """The permissions the user might have been given"""
  permissions: [String]

  """The roles the user might hold"""
  roles: [String]
}

type BooleanResult {
  result: Boolean!
}

type DataExport {
  createdAt: DateTime
  errors: JSON
  file: File
  id: Int!
  lang: String
  log: JSON
  meta: JSON
  status: Int
  title: JSON
  type: String
  updatedAt: DateTime
}

"""List all the location exports in the database."""
type DataExportQueryResult {
  dataExports: [DataExport]
  totalCount: Int
}

input DataExportUpsertInput {
  lang: String
  meta: JSON
  title: String!
  type: String!
}

type DataImport {
  createdAt: DateTime
  errors: JSON
  file: File
  id: Int!
  lang: String
  log: JSON
  mapping: JSON
  status: Int
  title: JSON
  updatedAt: DateTime
  warnings: JSON
}

"""List all the imports in the database."""
type DataImportQueryResult {
  dataImports: [DataImport]
  totalCount: Int
}

input DataImportUpsertInput {
  errors: JSON
  lang: String
  log: JSON
  mapping: JSON
  status: Int!
  title: String!
  type: String!
  warnings: JSON
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

type Event {
  address: String
  createdAt: DateTime
  dates: [EventDate]
  description: JSON
  firstEventDate: DateTime
  heroImage: Image
  id: Int!
  isFree: Boolean
  isImported: Boolean
  lastEventDate: DateTime
  locations: [Location]
  meta: JSON
  metaDesc: JSON
  organiser: String
  ownerId: Int!
  primaryTerms: [Term]
  slug: JSON
  status: Int!
  terms: [Term]
  title: JSON
  updatedAt: DateTime
}

type EventDate {
  begin: DateTime
  createdAt: DateTime
  date: DateTime
  end: DateTime
  id: Int!
  updatedAt: DateTime
}

"""List all the events in the database."""
type EventQueryResult {
  events: [Event]
  totalCount: Int
}

input EventSuggestionInput {
  address: String!
  dates: JSON
  description: JSON!
  heroImage: JSON
  isFree: Boolean!
  meta: JSON
  organiser: String!
  slug: JSON!
  terms: JSON
  title: JSON!
}

input EventUpsertInput {
  address: String!
  dates: JSON
  description: JSON
  heroImage: JSON
  isFree: Boolean!
  locations: JSON
  metaDesc: JSON
  organiser: String!
  owner: JSON!
  primaryTerms: JSON
  slug: JSON!
  status: Int!
  terms: JSON
  title: JSON!
}

type File {
  createdAt: DateTime
  credits: JSON
  id: Int!
  meta: JSON
  nanoid: String
  orderNumber: Int
  ownerId: Int!
  status: Int
  title: JSON
  updatedAt: DateTime
}

type FrontendSettings {
  centerOfGravity: JSON
  defaultMetaDesc: JSON
  mapJsonUrl: String
  quickSearchInfo: JSON
  suggestionsIntro: JSON
  suggestionsIntroEvent: JSON
  suggestionsMetaDesc: JSON
  suggestionsTandCInfo: JSON
  taxMapping: JSON
  taxonomies: [Taxonomy]
}

type GeoCodeResult {
  count: Int!
  geojson: JSON!
}

type GeoPoint {
  lat: Float
  lng: Float
}

type Homepage {
  highlights: JSON
  metaDesc: JSON
  missionStatement: JSON
  missionStatementPage: JSON
}

type Image {
  alt: JSON
  createdAt: DateTime
  credits: JSON
  cropPosition: Int
  id: Int!
  meta: JSON
  nanoid: String
  orderNumber: Int
  ownerId: Int!
  status: Int
  updatedAt: DateTime
}

"""List all the available images in the database."""
type ImageQueryResult {
  images: [Image]
  totalCount: Int
}

type ImageStatus {
  id: Int!
  meta: JSON
  status: Int!
}

input ImageUpdateInput {
  meta: JSON!
  ownerId: Int!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Location {
  accessibilityInformation: JSON
  address: JSON
  agency: String
  contactInfo: JSON
  createdAt: DateTime
  description: JSON
  eventLocationId: Int
  events: [Event]
  geoCodingInfo: JSON
  heroImage: Image
  id: Int!
  images: [Image]
  lat: Float
  lng: Float
  meta: JSON
  metaDesc: JSON
  offers: JSON
  ownerId: Int!
  primaryTerms: [Term]
  slug: JSON
  socialMedia: JSON
  status: Int!
  terms: [Term]
  title: JSON
  updatedAt: DateTime
  visibleFrom: DateTime
  visibleFromTime: DateTime
  visibleUntil: DateTime
  visibleUntilTime: DateTime
}

"""Query the ids of all the locations in the database."""
type LocationIDsQueryResult {
  ids: [Int]
}

"""Query all the locations in the database."""
type LocationQueryResult {
  locations: [Location]
  totalCount: Int
}

input LocationSuggestionInput {
  address: JSON!
  contactInfo: JSON
  description: JSON!
  heroImage: JSON
  meta: JSON!
  offers: JSON
  slug: JSON!
  socialMedia: JSON
  terms: JSON
  title: JSON!
}

input LocationUpsertInput {
  accessibilityInformation: JSON
  address: JSON
  agency: String
  contactInfo: JSON
  description: JSON
  eventLocationId: Int
  geoCodingInfo: JSON
  heroImage: JSON
  images: JSON
  lat: Float
  lng: Float
  metaDesc: JSON
  offers: JSON
  owner: JSON!
  primaryTerms: JSON
  slug: JSON!
  socialMedia: JSON
  status: Int!
  terms: JSON
  title: JSON!
}

type Module {
  id: Int!
  key: String
  name: JSON
  withTaxonomies: Boolean
}

type Mutation {
  authLogin(email: EmailAddress!, password: String!, scope: String!): AuthPayload!
  authLogout(userId: Int!): BooleanResult!
  authPasswordRequest(email: EmailAddress!, scope: String!): BooleanResult!
  authPasswordReset(password: String!, token: String!): BooleanResult!
  authRefresh(scope: String!): AuthPayload!
  authRequestEmailVerificationEmail(scope: String!, userId: Int!): BooleanResult!
  authVerifyEmail(token: String!): BooleanResult!
  dataExportCreate(data: DataExportUpsertInput!): DataExport!
  dataExportDelete(id: Int!, type: String!): BooleanResult!
  dataImportCreate(data: DataImportUpsertInput!): DataImport!
  dataImportDelete(id: Int!, type: String!): BooleanResult!
  dataImportFileDelete(id: Int!, type: String!): BooleanResult!
  dataImportUpdate(data: DataImportUpsertInput!, id: Int!): DataImport!
  eventCreate(data: EventUpsertInput!): Event!
  eventDelete(id: Int!): BooleanResult!
  eventSuggestion(data: EventSuggestionInput!): Location!
  eventUpdate(data: EventUpsertInput!, id: Int!): Event!
  imageDelete(id: Int!): BooleanResult!
  imageUpdate(data: ImageUpdateInput!, id: Int!): Image!
  locationCreate(data: LocationUpsertInput!): Location!
  locationDelete(id: Int!): BooleanResult!
  locationUpdate(data: LocationUpsertInput!, id: Int!): Location!
  pageCreate(data: PageUpsertInput!): Page!
  pageDelete(id: Int!): BooleanResult!
  pageUpdate(data: PageUpsertInput!, id: Int!): Page!
  settingsUpdate(data: [SettingsUpdateInput!]): BooleanResult!
  suggestion(data: LocationSuggestionInput!): Location!
  taxonomyCreate(data: TaxonomyUpsertInput!): Taxonomy!
  taxonomyDelete(id: Int!): BooleanResult!
  taxonomyUpdate(data: TaxonomyUpsertInput!, id: Int!): Taxonomy!
  termCreate(data: TermCreateInput!): Term!
  termDelete(id: Int!): BooleanResult!
  termUpdate(data: TermUpdateInput!, id: Int!): Term!
  tourCreate(data: TourUpsertInput!): Tour!
  tourDelete(id: Int!): BooleanResult!
  tourReorderTourStops(data: [TourStopOrderInput]!, id: Int!): Tour!
  tourStopCreate(data: TourStopCreateInput!): TourStop!
  tourStopDelete(id: Int!): BooleanResult!
  tourStopUpdate(data: TourStopUpdateInput!, id: Int!): TourStop!
  tourUpdate(data: TourUpsertInput!, id: Int!): Tour!
  userCreate(data: UserCreateInput!, scope: String!): User!
  userDelete(id: Int!, scope: String!): BooleanResult!
  userProfileImageDelete(id: Int!, scope: String!): BooleanResult!
  userProfilePasswordUpdate(id: Int!, password: String!, scope: String!): User!
  userProfileUpdate(data: UserProfileUpdateInput!, id: Int!, scope: String!): User!
  userSignup(data: UserSignupInput!, scope: String!): AuthPayload!
  userUpdate(data: UserUpdateInput!, id: Int!, scope: String!): BooleanResult!
}

type Page {
  content: JSON
  createdAt: DateTime
  fullText: String
  heroImage: Image
  id: Int!
  intro: JSON
  metaDesc: JSON
  ownerId: Int!
  slug: JSON
  status: Int!
  title: JSON
  updatedAt: DateTime
}

"""List all the pages in the database."""
type PageQueryResult {
  pages: [Page]
  totalCount: Int
}

input PageUpsertInput {
  content: JSON!
  heroImage: JSON
  intro: JSON!
  metaDesc: JSON
  owner: JSON!
  slug: JSON!
  status: Int!
  title: JSON!
}

type ProfileUser implements UserBaseNode {
  email: EmailAddress
  emailVerified: Boolean
  firstName: String
  id: Int!
  lastName: String
  profileImage: Image
  profileImageId: Int
}

type Query {
  adminUsers(roles: [String]!): [AdminUser] @deprecated(reason: "A publicly accessible list Lists all users that have a the given roles")
  dataExportRead(id: Int!, type: String!): DataExport!
  dataExports(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, where: JSON): DataExportQueryResult
  dataImportRead(id: Int!, type: String!): DataImport!
  dataImports(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, where: JSON): DataImportQueryResult
  event(id: Int, slug: String): Event!
  events(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, where: JSON): EventQueryResult
  frontendSettings: FrontendSettings
  geocode(q: String!): GeoCodeResult
  homepage: Homepage
  imageRead(id: Int!): Image!
  imageStatus(id: Int!): ImageStatus!
  images(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, taxonomyId: Int, where: JSON): ImageQueryResult
  location(id: Int, slug: String): Location!
  locationIds(where: JSON): LocationIDsQueryResult
  locations(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, where: JSON): LocationQueryResult
  moduleTaxonomies(key: String!): [Taxonomy]
  modules: [Module]
  page(id: Int, slug: String): Page!
  pages(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, where: JSON): PageQueryResult
  quickSearch(lang: String!, modules: [String], search: String!, termIds: [Int]): [SearchResult]
  setting(id: Int!): [Setting]
  settings(scope: String!): [Setting]
  taxonomies(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, where: JSON): TaxonomyQueryResult
  taxonomy(id: Int!): Taxonomy!
  term(id: Int!): Term!
  terms(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, taxonomyId: Int!, where: JSON): TermQueryResult
  tour(id: Int, slug: String): Tour!
  tourStopRead(id: Int!): TourStop!
  tours(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, where: JSON): TourQueryResult
  userProfileRead(id: Int!, scope: String!): ProfileUser!
  userRead(id: Int!, scope: String!): User!
  users(orderBy: JSON, pageIndex: Int = 0, pageSize: Int = 50, where: JSON): UsersQueryResult
}

type SearchResult {
  items: [SearchResultItem]
  module: String!
  totalCount: Int!
}

type SearchResultItem {
  countTourStops: Int
  dates: [EventDate]
  excerpt: JSON
  geopoint: GeoPoint
  heroImage: Image
  id: Int!
  locations: [Location]
  primaryTerms: [Term]
  slug: JSON!
  terms: [Term]
  title: JSON!
  type: String!
}

type Setting {
  createdAt: DateTime
  id: Int!
  key: String
  scope: String
  updatedAt: DateTime
  value: JSON
}

input SettingsUpdateInput {
  key: String!
  scope: String!
  value: JSON!
}

type Taxonomy {
  collectPrimaryTerm: Boolean
  createdAt: DateTime
  hasColor: Boolean
  hasIcons: Boolean
  hasReducedVisibility: Boolean
  id: Int!
  isRequired: Boolean
  modules: [Module]
  name: JSON
  slug: JSON
  termCount: Int
  terms: [Term]
  updatedAt: DateTime
}

"""List all the taxonomies in the database."""
type TaxonomyQueryResult {
  taxonomies: [Taxonomy]
  totalCount: Int
}

input TaxonomyUpsertInput {
  collectPrimaryTerm: Boolean!
  hasColor: Boolean!
  hasIcons: Boolean!
  hasReducedVisibility: Boolean!
  isRequired: Boolean!
  modules: JSON!
  name: JSON!
  slug: JSON!
}

type Term {
  _count: JSON
  berlinDeKey: String
  color: String
  colorDark: String
  createdAt: DateTime
  hasReducedVisibility: Boolean
  iconKey: String
  id: Int!
  name: JSON
  slug: JSON
  taxonomy: Taxonomy
  taxonomyId: Int!
  updatedAt: DateTime
}

input TermCreateInput {
  berlinDeKey: String
  color: String
  colorDark: String
  hasReducedVisibility: Boolean!
  iconKey: String
  name: JSON!
  slug: JSON!
  taxonomyId: Int!
}

"""List all the available terms of the given taxonomy in the database."""
type TermQueryResult {
  terms: [Term]
  totalCount: Int
}

input TermUpdateInput {
  berlinDeKey: String
  color: String
  colorDark: String
  hasReducedVisibility: Boolean
  iconKey: String
  name: JSON!
  slug: JSON!
}

type Tour {
  createdAt: DateTime
  description: JSON
  distance: JSON
  duration: JSON
  heroImage: Image
  id: Int!
  metaDesc: JSON
  modules: [Module]
  orderNumber: Int
  ownerId: Int!
  path: JSON!
  slug: JSON
  status: Int!
  teaser: JSON
  title: JSON
  tourStopCount: Int
  tourStops: [TourStop]
  updatedAt: DateTime
}

"""List all the tours in the database."""
type TourQueryResult {
  totalCount: Int
  tours: [Tour]
}

type TourStop {
  createdAt: DateTime
  description: JSON
  heroImage: Image
  id: Int!
  images: [Image]
  location: Location
  locationId: Int
  metaDesc: JSON
  number: Int
  teaser: JSON
  title: JSON
  tour: Tour
  tourId: Int
  updatedAt: DateTime
}

input TourStopCreateInput {
  description: JSON!
  images: JSON
  locationId: Int!
  metaDesc: JSON
  teaser: JSON!
  title: JSON!
  tourId: Int!
}

input TourStopOrderInput {
  id: Int
  number: Int
}

"""List all the available tour stops of the given tour in the database."""
type TourStopQueryResult {
  totalCount: Int
  tourStops: [TourStop]
}

input TourStopUpdateInput {
  description: JSON!
  heroImage: JSON
  images: JSON
  locationId: Int!
  metaDesc: JSON
  teaser: JSON!
  title: JSON!
  tourId: Int
}

input TourUpsertInput {
  description: JSON!
  distance: JSON!
  duration: JSON!
  heroImage: JSON
  metaDesc: JSON
  orderNumber: Int!
  owner: JSON!
  path: JSON!
  slug: JSON!
  status: Int!
  teaser: JSON!
  title: JSON!
}

type User implements UserBaseNode {
  createdAt: DateTime
  email: EmailAddress
  emailVerified: Boolean
  firstName: String
  id: Int!
  lastName: String
  ownsContentOnDelete: Boolean
  ownsEventImports: Boolean
  ownsSubmittedSuggestions: Boolean
  profileImageId: Int
  role: String
  updatedAt: DateTime
  userBanned: Boolean
}

interface UserBaseNode {
  email: EmailAddress
  emailVerified: Boolean
  firstName: String
  id: Int!
  lastName: String
  profileImageId: Int
}

input UserCreateInput {
  acceptedTerms: Boolean!
  email: String!
  firstName: String!
  lastName: String!
  ownsContentOnDelete: Boolean!
  ownsEventImports: Boolean!
  ownsSubmittedSuggestions: Boolean!
  password: String!
  role: String!
  userBanned: Boolean!
}

input UserProfileUpdateInput {
  email: EmailAddress!
  firstName: String!
  lastName: String!
}

input UserSignupInput {
  acceptedTerms: Boolean!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  password: String!
}

input UserUpdateInput {
  email: String!
  firstName: String!
  lastName: String!
  ownsContentOnDelete: Boolean!
  ownsEventImports: Boolean!
  ownsSubmittedSuggestions: Boolean!
  role: String!
  userBanned: Boolean!
}

"""
TODO: write better descriptions
last item in the list. Pass this cuSimple wrapper around our list of launches that contains a cursor to the
last item in the list. Pass this cursor to the launches query to fetch results
after these.
"""
type UsersQueryResult {
  totalCount: Int
  users: [User]
}
