### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  tokens: AuthPayloadTokens
  user: AuthUser
}

type AuthPayloadToken {
  expires: String!
  token: JWT
}

type AuthPayloadTokens {
  access: AuthPayloadToken
  refresh: AuthPayloadToken
}

type AuthUser {
  """Id of the user"""
  id: Int!

  """The permissions the user might have been given"""
  permissions: [String]

  """The roles the user might hold"""
  roles: [String]
}

type BooleanResult {
  result: Boolean!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Mutation {
  authLogin(email: EmailAddress!, password: String!, scope: String!): AuthPayload!
  authLogout(userId: Int!): BooleanResult!
  authPasswordRequest(email: EmailAddress!, scope: String!): BooleanResult!
  authPasswordReset(password: String!, token: String!): BooleanResult!
  authRefresh(scope: String!): AuthPayload!
  authRequestEmailVerificationEmail(scope: String!, userId: Int!): BooleanResult!
  authVerifyEmail(token: String!): BooleanResult!
  userProfilePasswordUpdate(password: String!, scope: String!, userId: Int!): User!
  userProfileUpdate(data: UserProfileUpdateInput!, scope: String!, userId: Int!): User!
  userSignup(data: UserSignupInput!, scope: String!): AuthPayload!
}

type ProfileUser {
  email: EmailAddress
  emailVerified: Boolean
  firstName: String
  id: Int!
  lastName: String
  role: String
}

type Query {
  userProfileRead(scope: String!, userId: Int!): ProfileUser!
  users: [User]!
  users2: [User]!
}

type User {
  createdAt: DateTime
  email: EmailAddress
  emailVerified: Boolean
  firstName: String
  id: Int!
  lastName: String
  role: String
  updatedAt: DateTime
  userBanned: Boolean
}

input UserProfileUpdateInput {
  email: EmailAddress!
  firstName: String!
  lastName: String!
}

input UserSignupInput {
  acceptedTerms: Boolean!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  password: String!
}
