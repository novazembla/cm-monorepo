// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filterJson", "selectRelationCount"]
}

model User {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  firstName      String
  lastName       String
  role           String     @default("user")
  emailVerified Boolean    @default(false)
  acceptedTerms  Boolean    @default(false)
  userBanned     Boolean    @default(false)
  password       String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  
  locations      Location[]
  
  tokens         Token[]
  
  pages          Page[]
  
  events      Event[]

  images         Image[]    @relation("images")
  
  profileImageId Int?           
  profileImage   Image?  @relation(fields: [profileImageId], references: [id], name: "profileImage")
}

model Location {
  id            Int    @id @default(autoincrement())
  title           Json     
  slug           Json    
  description   Json   @default("{}")
  address       Json?  @default("{}")
  contactInfo   Json?  @default("{}")
  offers        Json?  @default("{}")

  status      Int  

  lat         Float?
  lng         Float?

  events      Event[]
  images      Image[]
  terms       Term[]

  fullText      String? @default("")

  ownerId     Int    
  owner       User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([ownerId], name: "indexLocationOwnerId")
}


model Event {
  id            Int    @id @default(autoincrement())
  title           Json     
  slug           Json    
  description   Json?  @default("{}")
  eventLocation Json?  @default("{}")
  
  locationId    Int
  location      Location @relation(fields: [locationId], references: [id])

  ownerId     Int    
  owner       User   @relation(fields: [ownerId], references: [id])

  status      Int  
  
  images   Image[]

  heroImageId    Int?
  heroImage      Image?    @relation(fields: [heroImageId], references: [id], name: "eventHeroImage")

  fullText      String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([ownerId], name: "indexEventOwnerId")
}

model EventDate {
  id      Int    @id @default(autoincrement())
  date    DateTime 
  begin   DateTime
  end     DateTime
}

model Token {
  id     Int    @id @default(autoincrement())
  token  String
  type   String @db.VarChar(16)
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  expires     DateTime
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@index([userId], name: "indexTokenUserId")
}

model Setting {
  id     Int    @id @default(autoincrement())
  key    String @db.VarChar(128) @unique
  value   Json
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Module {
  id             Int        @id @default(autoincrement())
  key            String     @db.VarChar(12) @unique
  name           Json
  withTaxonomies Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  taxonomies     Taxonomy[]
}

model Taxonomy {
  id             Int        @id @default(autoincrement())
  name           Json     
  slug           Json     
  multiTerm      Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  terms          Term[]
  modules        Module[]

}

model Term {
  id             Int        @id @default(autoincrement())
  name           Json     
  slug           Json   

  taxonomyId     Int
  taxonomy       Taxonomy   @relation(fields: [taxonomyId], references: [id])

  locations      Location[]

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt

  @@index([taxonomyId], name: "indexTermTaxonomyId")
}

model Page {
  id             Int        @id @default(autoincrement())
  title          Json     
  slug           Json     
  content        Json

  heroImageId    Int?
  heroImage      Image?    @relation(fields: [heroImageId], references: [id], name: "pageHeroImage")

  status      Int  

  fullText       String    @default("")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  ownerId     Int    
  owner       User   @relation(fields: [ownerId], references: [id])
  
  @@index([ownerId], name: "indexPageOwnerId")
}

// TODO: add a retry mechanism 
model Image {
  id             Int        @id @default(autoincrement())
  uuid           String     @db.VarChar(48) @unique
  meta           Json
  status         Int        @default(1)
  retryCount     Int        @default(0)
  type           String     @db.VarChar(16) @default("image")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  ownerId        Int           
  owner          User   @relation(fields: [ownerId], references: [id], name: "images")

  events         Event[]
  locations      Location[]

  profileImageUsers   User[]  @relation("profileImage")
  heroImagePages      Page[]  @relation("pageHeroImage")
  heroImageEvents     Event[]  @relation("eventHeroImage")

  @@index([ownerId], name: "indexImageOwnerId")
  @@index([ownerId, type], name: "indexImageOwnerIdType")
  @@index([status], name: "indexImageStatus")
}
