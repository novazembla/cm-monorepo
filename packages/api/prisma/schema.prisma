// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// TODO: add fulltext index https://www.prisma.io/docs/concepts/components/prisma-client/full-text-search

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

model User {
  id                 Int      @id @default(autoincrement())
  email              String   @unique
  firstName          String
  lastName           String
  role               String   @default("user")
  emailVerified      Boolean  @default(false)
  acceptedTerms      Boolean  @default(false)
  userBanned         Boolean  @default(false)
  ownsEventImports   Boolean  @default(false)
  ownsConentOnDelete Boolean  @default(false)
  password           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  fullText String? @default("")

  locations Location[]

  tokens Token[]

  pages Page[]

  events Event[]

  images Image[] @relation("images")

  tours Tour[]

  files File[]

  tourStops TourStop[]

  dataImports DataImport[]
  dataExports DataExport[]

  profileImageId Int?
  profileImage   Image? @relation(fields: [profileImageId], references: [id], name: "profileImage", onDelete: Cascade)
}

model Location {
  id                       Int   @id @default(autoincrement())
  
  title_de                    String  @default("")
  slug_de                     String  @default("")
  description_de              String  @default("")
  offers_de                   String? @default("")
  accessibilityInformation_de String? @default("")

  title_en                    String  @default("")
  slug_en                     String  @default("")
  description_en              String  @default("")
  offers_en                   String? @default("")
  accessibilityInformation_en String? @default("")

  address                  Json? @default("{}")
  contactInfo              Json? @default("{}")
  geoCodingInfo            Json? @default("{}")
  socialMedia              Json? @default("{}")

  visibleFrom     DateTime?
  visibleFromTime DateTime?

  visibleUntil     DateTime?
  visibleUntilTime DateTime?

  status Int

  lat Float?
  lng Float?

  events    Event[]
  images    Image[]
  terms     Term[]     @relation(name: "locationTerms")
  tourStops TourStop[]

  fullText String? @default("")

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  heroImageId Int?
  heroImage   Image? @relation(fields: [heroImageId], references: [id], name: "locationHeroImage", onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  eventLocationId Int?

  agency String?

  primaryTerms  Term[] @relation(name: "locationPrimaryTerms")

  importedLocationHash String?

  @@index([ownerId], name: "indexLocationOwnerId")
}

model Event {
  id          Int   @id @default(autoincrement())
  
  title_de        String @default("")
  slug_de         String @default("")
  description_de  String @default("")

  title_en        String @default("")
  slug_en         String @default("")
  description_en  String @default("")
  address         String @default("")
  organiser       String @default("")

  meta        Json? @default("{}")

  isFree     Boolean    @default(false)
  isImported Boolean    @default(false)
  locations  Location[]

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  status Int

  images Image[]
  dates  EventDate[]
  terms  Term[]

  heroImageId Int?
  heroImage   Image? @relation(fields: [heroImageId], references: [id], name: "eventHeroImage", onDelete: Cascade)

  fullText String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  primaryTerms  Term[] @relation(name: "eventPrimaryTerms")

  firstEventDate      DateTime?
  lastEventDate  DateTime?

  importedEventHash String?

  @@index([ownerId], name: "indexEventOwnerId")
}

model EventDate {
  id      Int      @id @default(autoincrement())
  date    DateTime
  begin   DateTime
  end     DateTime
  eventId Int?
  event   Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Token {
  id      Int      @id @default(autoincrement())
  token   String
  type    String   @db.VarChar(16)
  userId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId], name: "indexTokenUserId")
}

model Setting {
  id    Int           @id @default(autoincrement())
  scope  String        @default("settings")
  key   String @unique @db.VarChar(128)
  value Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Module {
  id             Int        @id @default(autoincrement())
  key            String     @unique @db.VarChar(12)
  name           Json
  withTaxonomies Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt
  taxonomies     Taxonomy[]
}

model Taxonomy {
  id        Int      @id @default(autoincrement())
  
  name_de        String @default("")
  slug_de         String @default("")
  
  name_en        String @default("")
  slug_en         String @default("")

  multiTerm Boolean  @default(false)
  hasColor  Boolean  @default(false)
  collectPrimaryTerm  Boolean  @default(false)
  isRequired  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  fullText String? @default("")

  terms   Term[]
  modules Module[]

}

model Term {
  id   Int  @id @default(autoincrement())
  
  name_de        String @default("")
  slug_de         String @default("")
  
  name_en        String @default("")
  slug_en         String @default("")

  color      String   @default("")
  colorDark  String   @default("")
  taxonomyId Int
  taxonomy   Taxonomy @relation(fields: [taxonomyId], references: [id], onDelete: Cascade)

  locations Location[] @relation(name: "locationTerms", onDelete: Cascade)

  primaryTermsLocations  Location[] @relation(name: "locationPrimaryTerms", onDelete: Cascade)
  primaryTermsEvents  Event[] @relation(name: "eventPrimaryTerms", onDelete: Cascade)

  events Event[]

  fullText String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([taxonomyId], name: "indexTermTaxonomyId")
}

model Tour {
  id Int @id @default(autoincrement())
  
  // TODO: m
  orderNumber Int   @default(1)

  title_de       String @default("") 
  slug_de        String @default("") 
  duration_de    String @default("") 
  distance_de    String @default("") 
  teaser_de      String @default("") 
  description_de String @default("") 

  title_en       String @default("") 
  slug_en        String @default("") 
  duration_en    String @default("") 
  distance_en    String @default("") 
  teaser_en      String @default("") 
  description_en String @default("") 

  path        Json

  heroImageId Int?
  heroImage   Image? @relation(fields: [heroImageId], references: [id], name: "tourHeroImage", onDelete: Cascade)

  status Int

  fullText String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)


  tourStops TourStop[]
  @@index([ownerId], name: "indexTourOwnerId")
}

model TourStop {
  id Int @id @default(autoincrement())

  title_de       String @default("") 
  teaser_de        String @default("") 
  description_de String @default("") 

  title_en       String @default("") 
  teaser_en        String @default("") 
  description_en String @default("") 


  number Int? @default(1)
  images Image[]

  loactionId Int
  location   Location? @relation(fields: [loactionId], references: [id], onDelete: Cascade)


  tourId Int?
  tour   Tour? @relation(fields: [tourId], references: [id])

  heroImageId Int?
  heroImage   Image? @relation(fields: [heroImageId], references: [id], name: "tourStopHeroImage", onDelete: Cascade)

  fullText String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)


  @@index([ownerId], name: "indexTourStopOwnerId")
}

model Page {
  id Int @id @default(autoincrement())

  title_de       String @default("") 
  slug_de        String @default("") 
  intro_de    String @default("") 
  content_de    String @default("") 
  
  title_en       String @default("") 
  slug_en        String @default("") 
  intro_en    String @default("") 
  content_en    String @default("") 
  
  heroImageId Int?
  heroImage   Image? @relation(fields: [heroImageId], references: [id], name: "pageHeroImage", onDelete: Cascade)

  status Int

  fullText String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  ownerId   Int
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId], name: "indexPageOwnerId")
}



// TODO: add a retry mechanism
model Image {
  id Int @id @default(autoincrement())

  nanoid      String @unique @db.VarChar(48)
  meta        Json

  alt_de       String @default("") 
  credits_de        String @default("") 
    
  alt_en       String @default("") 
  credits_en        String @default("") 

  cropPosition  Int @default(0)
  
  status      Int    @default(0)
  orderNumber Int    @default(0)

  retryCount Int      @default(0)
  type       String   @default("image") @db.VarChar(16)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  ownerId    Int
  owner      User     @relation(fields: [ownerId], references: [id], name: "images", onDelete: Cascade)

  events       Event[]
  locations    Location[]
  tourStops    TourStop[]
  
  profileImageUsers  User[]     @relation("profileImage")
  heroImagePages     Page[]     @relation("pageHeroImage")
  heroImageEvents    Event[]    @relation("eventHeroImage")
  heroImageLocations Location[] @relation("locationHeroImage")
  heroImageTours     Tour[]     @relation("tourHeroImage")
  heroImageTourStops TourStop[] @relation("tourStopHeroImage")

  @@index([ownerId], name: "indexImageOwnerId")
  @@index([ownerId, type], name: "indexImageOwnerIdType")
  @@index([status], name: "indexImageStatus")
}

model DataExport {
  id       Int    @id @default(autoincrement())
  title    String
  lang      String @default("en")
  type      String @default("location")
  log      Json?  @default("[]")
  errors   Json?  @default("[]")
  meta  Json?  @default("{}")
  status   Int    @default(0)

  fileId Int?
  file   File? @relation(fields: [fileId], references: [id], name: "dataExportFiles")

  ownerId Int?
  owner   User? @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model DataImport {
  id       Int    @id @default(autoincrement())
  title    String
  lang      String @default("en")
  type      String @default("location")
  log      Json?  @default("[]")
  errors   Json?  @default("[]")
  mapping  Json?  @default("[]")
  warnings Json?  @default("[]")
  status   Int    @default(0)

  fileId Int?
  file   File? @relation(fields: [fileId], references: [id], name: "dataImportFiles")

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}


model File {
  id Int @id @default(autoincrement())

  nanoid String @unique @db.VarChar(48)
  status Int    @default(0)
  meta   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // TODO: finish XXX
  title_de       String @default("") 
  credits_de        String @default("") 
    
  title_en       String @default("") 
  credits_en        String @default("") 

  dataImports DataImport[] @relation("dataImportFiles")
  dataExports DataExport[] @relation("dataExportFiles")
}
